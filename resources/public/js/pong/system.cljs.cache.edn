;; Analyzed by ClojureScript 1.7.228
{:use-macros {defpath com.rpl.specter.macros}, :excludes #{}, :name pong.system, :imports nil, :requires {s com.rpl.specter, com.rpl.specter com.rpl.specter, m clojure.core.matrix, clojure.core.matrix clojure.core.matrix, mo clojure.core.matrix.operators, clojure.core.matrix.operators clojure.core.matrix.operators, avl clojure.data.avl, clojure.data.avl clojure.data.avl}, :uses nil, :defs {switch-path {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 75, :column 7, :end-line 75, :end-column 18, :arglists (quote ([dom]))}, :name pong.system/switch-path, :variadic false, :file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :end-column 18, :method-params ([dom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dom]))}, jump {:name pong.system/jump, :file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 27, :column 1, :end-line 27, :end-column 10, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 27, :column 6, :end-line 27, :end-column 10}}, velocity {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 21, :column 7, :end-line 21, :end-column 15, :arglists (quote ([x y z]))}, :name pong.system/velocity, :variadic false, :file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :end-column 15, :method-params ([x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x y z]))}, dom {:name pong.system/dom, :file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 35, :column 1, :end-line 35, :end-column 9, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 35, :column 6, :end-line 35, :end-column 9}}, step-ecs {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 91, :column 7, :end-line 91, :end-column 15, :arglists (quote ([ecs dt]))}, :name pong.system/step-ecs, :variadic false, :file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :end-column 15, :method-params ([ecs dt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ecs dt]))}, hybrid {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 24, :column 7, :end-line 24, :end-column 13, :arglists (quote ([pth] [md pths])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pth] [md pths]), :arglists ([pth] [md pths]), :arglists-meta (nil nil)}}, :name pong.system/hybrid, :variadic false, :file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pth] [md pths]), :arglists ([pth] [md pths]), :arglists-meta (nil nil)}, :method-params ([pth] [md pths]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists ([pth] [md pths])}, mean {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 33, :column 7, :end-line 33, :end-column 11, :arglists (quote ([mtx]))}, :name pong.system/mean, :variadic false, :file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :end-column 11, :method-params ([mtx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mtx]))}, sys-hybrid {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 80, :column 7, :end-line 80, :end-column 17, :arglists (quote ([st dt]))}, :name pong.system/sys-hybrid, :variadic false, :file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :end-column 17, :method-params ([st dt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists (quote ([st dt]))}, flow {:name pong.system/flow, :file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 28, :column 1, :end-line 28, :end-column 10, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 28, :column 6, :end-line 28, :end-column 10}}, reach {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 31, :column 7, :end-line 31, :end-column 12, :arglists (quote ([p q]))}, :name pong.system/reach, :variadic false, :file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :end-column 12, :method-params ([p q]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p q]))}, geometry {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 22, :column 7, :end-line 22, :end-column 15, :arglists (quote ([prim r]))}, :name pong.system/geometry, :variadic false, :file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :end-column 15, :method-params ([prim r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([prim r]))}, step-dom {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 95, :column 7, :end-line 95, :end-column 15, :arglists (quote ([dom dt]))}, :name pong.system/step-dom, :variadic false, :file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :end-column 15, :method-params ([dom dt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 2, :fn-var true, :arglists (quote ([dom dt]))}, avoid {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 32, :column 7, :end-line 32, :end-column 12, :arglists (quote ([p q]))}, :name pong.system/avoid, :variadic false, :file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :end-column 12, :method-params ([p q]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p q]))}, id {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 19, :column 7, :end-line 19, :end-column 9, :arglists (quote ([uid]))}, :name pong.system/id, :variadic false, :file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :end-column 9, :method-params ([uid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([uid]))}, material {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 23, :column 7, :end-line 23, :end-column 15, :arglists (quote ([c]))}, :name pong.system/material, :variadic false, :file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :end-column 15, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, KEY1-KEY2-VAL {:name pong.system/KEY1-KEY2-VAL, :file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 72, :column 1, :end-line 72, :end-column 19, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 72, :column 6, :end-line 72, :end-column 19}}, position {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 20, :column 7, :end-line 20, :end-column 15, :arglists (quote ([x y z]))}, :name pong.system/position, :variadic false, :file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :end-column 15, :method-params ([x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x y z]))}, ALL {:name pong.system/ALL, :file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 10, :column 1, :end-line 10, :end-column 13, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 10, :column 10, :end-line 10, :end-column 13}}}, :require-macros {com.rpl.specter.macros com.rpl.specter.macros, m clojure.core.matrix, clojure.core.matrix clojure.core.matrix}, :cljs.analyzer/constants {:seen #{:e/| :color :jump/position :flow/position :e/b2 :| :mode :e/b0 :geometry :radius :flow/velocity :e/b1 :primitive :id :material :e/a1 :e/a :position :params-path :velocity :e/a0 :e/cb}, :order [:primitive :radius :color :mode :params-path :e/a0 :e/a1 :e/b0 :e/b1 :e/b2 :e/cb :id :position :geometry :material :flow/position :velocity :flow/velocity :jump/position :| :e/a :e/|]}, :doc nil}