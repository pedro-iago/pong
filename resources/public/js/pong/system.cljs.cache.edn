;; Analyzed by ClojureScript 1.7.228
{:use-macros {defpath com.rpl.specter.macros}, :excludes #{}, :name pong.system, :imports nil, :requires {s com.rpl.specter, com.rpl.specter com.rpl.specter, com.rpl.specter.impl com.rpl.specter.impl, m clojure.core.matrix, clojure.core.matrix clojure.core.matrix, mo clojure.core.matrix.operators, clojure.core.matrix.operators clojure.core.matrix.operators, avl clojure.data.avl, clojure.data.avl clojure.data.avl}, :uses {compiled-path? com.rpl.specter.impl, structure-path? com.rpl.specter.impl}, :defs {switch-path {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 40, :column 7, :end-line 40, :end-column 18, :arglists (quote ([dom]))}, :name pong.system/switch-path, :variadic false, :file "src/cljs/pong/system.cljs", :end-column 18, :method-params ([dom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dom]))}, jump {:name pong.system/jump, :file "src/cljs/pong/system.cljs", :line 62, :column 1, :end-line 62, :end-column 10, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 62, :column 6, :end-line 62, :end-column 10}}, velocity {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 54, :column 7, :end-line 54, :end-column 15, :arglists (quote ([x y z]))}, :name pong.system/velocity, :variadic false, :file "src/cljs/pong/system.cljs", :end-column 15, :method-params ([x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x y z]))}, dom {:name pong.system/dom, :file "src/cljs/pong/system.cljs", :line 71, :column 1, :end-line 71, :end-column 9, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 71, :column 6, :end-line 71, :end-column 9}}, subgroup {:name pong.system/subgroup, :file "src/cljs/pong/system.cljs", :line 23, :column 1, :end-line 23, :end-column 18, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 23, :column 10, :end-line 23, :end-column 18}}, step-ecs {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 123, :column 7, :end-line 123, :end-column 15, :arglists (quote ([ecs dt]))}, :name pong.system/step-ecs, :variadic false, :file "src/cljs/pong/system.cljs", :end-column 15, :method-params ([ecs dt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ecs dt]))}, KEY-VAL {:name pong.system/KEY-VAL, :file "src/cljs/pong/system.cljs", :line 34, :column 1, :end-line 34, :end-column 13, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 34, :column 6, :end-line 34, :end-column 13}}, mean {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 68, :column 7, :end-line 68, :end-column 11, :arglists (quote ([mtx]))}, :name pong.system/mean, :variadic false, :file "src/cljs/pong/system.cljs", :end-column 11, :method-params ([mtx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mtx]))}, flow {:name pong.system/flow, :file "src/cljs/pong/system.cljs", :line 63, :column 1, :end-line 63, :end-column 10, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 63, :column 6, :end-line 63, :end-column 10}}, KEYS {:name pong.system/KEYS, :file "src/cljs/pong/system.cljs", :line 22, :column 1, :end-line 22, :end-column 10, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 22, :column 6, :end-line 22, :end-column 10}}, reach {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 66, :column 7, :end-line 66, :end-column 12, :arglists (quote ([p q k]))}, :name pong.system/reach, :variadic false, :file "src/cljs/pong/system.cljs", :end-column 12, :method-params ([p q k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p q k]))}, compute {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 44, :column 7, :end-line 44, :end-column 14, :arglists (quote ([f params st]))}, :name pong.system/compute, :variadic false, :file "src/cljs/pong/system.cljs", :end-column 14, :method-params ([f params st]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f params st]))}, PARAMS-PATHS {:name pong.system/PARAMS-PATHS, :file "src/cljs/pong/system.cljs", :line 36, :column 1, :end-line 36, :end-column 18, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 36, :column 6, :end-line 36, :end-column 18}}, geometry {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 55, :column 7, :end-line 55, :end-column 15, :arglists (quote ([prim r]))}, :name pong.system/geometry, :variadic false, :file "src/cljs/pong/system.cljs", :end-column 15, :method-params ([prim r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 2, :fn-var true, :arglists (quote ([prim r]))}, fsm {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 57, :column 7, :end-line 57, :end-column 10, :arglists (quote ([pth] [md params])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pth] [md params]), :arglists ([pth] [md params]), :arglists-meta (nil nil)}}, :name pong.system/fsm, :variadic false, :file "src/cljs/pong/system.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pth] [md params]), :arglists ([pth] [md params]), :arglists-meta (nil nil)}, :method-params ([pth] [md params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 2, :fn-var true, :arglists ([pth] [md params])}, sys-fsm {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 115, :column 7, :end-line 115, :end-column 14, :arglists (quote ([st dt]))}, :name pong.system/sys-fsm, :variadic false, :file "src/cljs/pong/system.cljs", :end-column 14, :method-params ([st dt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 2, :fn-var true, :arglists (quote ([st dt]))}, step-dom {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 126, :column 7, :end-line 126, :end-column 15, :arglists (quote ([dom dt]))}, :name pong.system/step-dom, :variadic false, :file "src/cljs/pong/system.cljs", :end-column 15, :method-params ([dom dt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 2, :fn-var true, :arglists (quote ([dom dt]))}, FSM-COMPONENTS {:name pong.system/FSM-COMPONENTS, :file "src/cljs/pong/system.cljs", :line 37, :column 1, :end-line 37, :end-column 20, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 37, :column 6, :end-line 37, :end-column 20}}, avoid {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 67, :column 7, :end-line 67, :end-column 12, :arglists (quote ([p q k]))}, :name pong.system/avoid, :variadic false, :file "src/cljs/pong/system.cljs", :end-column 12, :method-params ([p q k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p q k]))}, id {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 52, :column 7, :end-line 52, :end-column 9, :arglists (quote ([uid]))}, :name pong.system/id, :variadic false, :file "src/cljs/pong/system.cljs", :end-column 9, :method-params ([uid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([uid]))}, material {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 56, :column 7, :end-line 56, :end-column 15, :arglists (quote ([c]))}, :name pong.system/material, :variadic false, :file "src/cljs/pong/system.cljs", :end-column 15, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, KEY1-KEY2-VAL {:name pong.system/KEY1-KEY2-VAL, :file "src/cljs/pong/system.cljs", :line 35, :column 1, :end-line 35, :end-column 19, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 35, :column 6, :end-line 35, :end-column 19}}, path? {:name pong.system/path?, :file "src/cljs/pong/system.cljs", :line 33, :column 1, :end-line 33, :end-column 11, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 33, :column 6, :end-line 33, :end-column 11}}, position {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 53, :column 7, :end-line 53, :end-column 15, :arglists (quote ([x y z]))}, :name pong.system/position, :variadic false, :file "src/cljs/pong/system.cljs", :end-column 15, :method-params ([x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x y z]))}, ALL {:name pong.system/ALL, :file "src/cljs/pong/system.cljs", :line 14, :column 1, :end-line 14, :end-column 13, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/system.cljs", :line 14, :column 10, :end-line 14, :end-column 13}}}, :require-macros {com.rpl.specter.macros com.rpl.specter.macros, m clojure.core.matrix, clojure.core.matrix clojure.core.matrix}, :cljs.analyzer/constants {:seen #{:color :mode :params :geometry :radius :center :primitive :c :id :material :triangle/a :b :position :fsm/position :triangle/c :fear :step :velocity :fsm/velocity :triangle/b :a :love}, :order [:primitive :radius :color :mode :params :step :love :id :position :geometry :material :fsm/position :center :fear :triangle/a :velocity :fsm/velocity :a :triangle/b :b :triangle/c :c]}, :doc nil}