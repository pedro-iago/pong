;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name pong.parser, :imports nil, :requires {om om.next, om.next om.next, avl clojure.data.avl, clojure.data.avl clojure.data.avl, s com.rpl.specter, com.rpl.specter com.rpl.specter}, :uses nil, :defs {read {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/parser.cljs", :line 6, :column 7, :end-line 6, :end-column 11, :arglists (quote ([{:keys [state query], :as env} key params]))}, :name pong.parser/read, :variadic false, :file "src/cljs/pong/parser.cljs", :end-column 11, :method-params ([p__37104 key params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [state query], :as env} key params]))}, mutate {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/parser.cljs", :line 15, :column 7, :end-line 15, :end-column 13, :arglists (quote ([{:keys [state query], :as env} key params]))}, :name pong.parser/mutate, :variadic false, :file "src/cljs/pong/parser.cljs", :end-column 13, :method-params ([p__37123 key params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [state query], :as env} key params]))}, parser {:name pong.parser/parser, :file "src/cljs/pong/parser.cljs", :line 26, :column 1, :end-line 26, :end-column 12, :meta {:file "/home/pedro/GitHub/pong/src/cljs/pong/parser.cljs", :line 26, :column 6, :end-line 26, :end-column 12}}}, :require-macros {om om.next, om.next om.next}, :cljs.analyzer/constants {:seen #{:counts :read :value :state :radius :keys :not-found :id :count/by-id :action :query :mutate}, :order [:state :query :value :not-found :id :action :keys :counts :radius :count/by-id :read :mutate]}, :doc nil}