;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name pong.fsm, :imports nil, :requires {s com.rpl.specter, com.rpl.specter com.rpl.specter, m clojure.core.matrix, clojure.core.matrix clojure.core.matrix, mo clojure.core.matrix.operators, clojure.core.matrix.operators clojure.core.matrix.operators, avl clojure.data.avl, clojure.data.avl clojure.data.avl, pong.paths pong.paths}, :uses {path? pong.paths}, :defs {fsm {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljc/pong/fsm.cljc", :line 12, :column 7, :end-line 12, :end-column 10, :arglists (quote ([pth] [md params])), :doc "builts a finite-state-machine from function and its parameters", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pth] [md params]), :arglists ([pth] [md params]), :arglists-meta (nil nil)}}, :name pong.fsm/fsm, :variadic false, :file "src/cljc/pong/fsm.cljc", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pth] [md params]), :arglists ([pth] [md params]), :arglists-meta (nil nil)}, :method-params ([pth] [md params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists ([pth] [md params]), :doc "builts a finite-state-machine from function and its parameters"}, jump {:name pong.fsm/jump, :file "src/cljc/pong/fsm.cljc", :line 16, :column 1, :end-line 16, :end-column 46, :doc "fsm: set to value on tick", :meta {:file "/home/pedro/GitHub/pong/src/cljc/pong/fsm.cljc", :line 16, :column 42, :end-line 16, :end-column 46, :doc "fsm: set to value on tick"}}, flow {:name pong.fsm/flow, :file "src/cljc/pong/fsm.cljc", :line 18, :column 1, :end-line 18, :end-column 60, :doc "fsm: set rate of change on tick (euler)", :meta {:file "/home/pedro/GitHub/pong/src/cljc/pong/fsm.cljc", :line 18, :column 56, :end-line 18, :end-column 60, :doc "fsm: set rate of change on tick (euler)"}}, reach {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljc/pong/fsm.cljc", :line 47, :column 7, :end-line 47, :end-column 12, :arglists (quote ([p q k]))}, :name pong.fsm/reach, :variadic false, :file "src/cljc/pong/fsm.cljc", :end-column 12, :method-params ([p q k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p q k]))}, avoid {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljc/pong/fsm.cljc", :line 48, :column 7, :end-line 48, :end-column 12, :arglists (quote ([p q k]))}, :name pong.fsm/avoid, :variadic false, :file "src/cljc/pong/fsm.cljc", :end-column 12, :method-params ([p q k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p q k]))}, mean {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljc/pong/fsm.cljc", :line 49, :column 7, :end-line 49, :end-column 11, :arglists (quote ([mtx]))}, :name pong.fsm/mean, :variadic false, :file "src/cljc/pong/fsm.cljc", :end-column 11, :method-params ([mtx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mtx]))}, follow {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/src/cljc/pong/fsm.cljc", :line 50, :column 7, :end-line 50, :end-column 13, :arglists (quote ([p q k1 k2]))}, :name pong.fsm/follow, :variadic false, :file "src/cljc/pong/fsm.cljc", :end-column 13, :method-params ([p q k1 k2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 4, :fn-var true, :arglists (quote ([p q k1 k2]))}}, :require-macros {m clojure.core.matrix, clojure.core.matrix clojure.core.matrix}, :cljs.analyzer/constants {:seen #{:mode :params :step}, :order [:mode :params :step]}, :doc nil}