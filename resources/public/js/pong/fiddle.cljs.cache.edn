;; Analyzed by ClojureScript 1.7.228
{:use-macros {go cljs.core.async.macros, defpath com.rpl.specter.macros}, :excludes #{}, :name pong.fiddle, :imports nil, :requires {com.rpl.specter com.rpl.specter, sys pong.system, pong.aframe-react pong.aframe-react, dom om.dom, pong.parser pong.parser, async cljs.core.async, om.dom om.dom, cljs.core.async cljs.core.async, mo clojure.core.matrix.operators, m clojure.core.matrix, clojure.core.matrix.operators clojure.core.matrix.operators, avl clojure.data.avl, clojure.core.matrix clojure.core.matrix, s com.rpl.specter, pong.ui.counters pong.ui.counters, om om.next, a-vr pong.aframe-react, om.next om.next, pong.core pong.core, clojure.data.avl clojure.data.avl, pong.system pong.system, pong.ui.spheres pong.ui.spheres}, :uses {CounterSphere pong.ui.spheres, App pong.core, counter-sphere pong.ui.spheres, RandomSphere pong.ui.spheres, reconciler pong.core, init-data pong.core, counter pong.ui.counters, app-state pong.core, parser pong.parser, Counter pong.ui.counters}, :defs {reset-mult! {:protocol-inline nil, :meta {:file "C:\\Users\\PedroIago\\Documents\\GitHub\\pong\\src\\cljs\\pong\\fiddle.cljs", :line 20, :column 7, :end-line 20, :end-column 18, :arglists (quote ([st mult]))}, :name pong.fiddle/reset-mult!, :variadic false, :file "src\\cljs\\pong\\fiddle.cljs", :end-column 18, :method-params ([st mult]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([st mult]))}, loop-sys {:protocol-inline nil, :meta {:file "C:\\Users\\PedroIago\\Documents\\GitHub\\pong\\src\\cljs\\pong\\fiddle.cljs", :line 57, :column 9, :end-line 57, :end-column 17, :arglists (quote ([]))}, :name pong.fiddle/loop-sys, :variadic false, :file "src\\cljs\\pong\\fiddle.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 57, :end-line 57, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {com.rpl.specter.macros com.rpl.specter.macros, cljs.core.async.macros cljs.core.async.macros, om om.next, om.next om.next, dom om.dom, om.dom om.dom, m clojure.core.matrix, clojure.core.matrix clojure.core.matrix}, :cljs.analyzer/constants {:seen #{:e/| :id decrement! :count/by-id :mult :e/a increment! :velocity}, :order [:count/by-id :mult increment! :id decrement! :velocity :e/a :e/|]}, :doc nil}