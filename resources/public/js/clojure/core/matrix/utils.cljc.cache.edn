;; Analyzed by ClojureScript 1.7.228
{:use-macros {is-long-array? clojure.core.matrix.macros, TODO clojure.core.matrix.macros}, :excludes #{update}, :name clojure.core.matrix.utils, :imports nil, :requires nil, :uses nil, :defs {copy-long-array {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/utils.cljc", :line 104, :column 7, :end-line 104, :end-column 22, :arglists (quote ([arr])), :doc "Returns a copy of a long array"}, :name clojure.core.matrix.utils/copy-long-array, :variadic false, :file "resources/public/js/clojure/core/matrix/utils.cljc", :end-column 22, :method-params ([arr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 104, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arr])), :doc "Returns a copy of a long array"}, enhance-protocol-kv {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/utils.cljc", :line 253, :column 7, :end-line 253, :end-column 26, :arglists (quote ([[name p]])), :doc "Transform MapEntry to just map with some additional fields"}, :name clojure.core.matrix.utils/enhance-protocol-kv, :variadic false, :file "resources/public/js/clojure/core/matrix/utils.cljc", :end-column 26, :method-params ([p__20197]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 253, :end-line 253, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[name p]])), :doc "Transform MapEntry to just map with some additional fields"}, copy-object-array {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/utils.cljc", :line 110, :column 7, :end-line 110, :end-column 24, :arglists (quote ([arr])), :doc "Returns a copy of a long array"}, :name clojure.core.matrix.utils/copy-object-array, :variadic false, :file "resources/public/js/clojure/core/matrix/utils.cljc", :end-column 24, :method-params ([arr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arr])), :doc "Returns a copy of a long array"}, valid-shape? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/utils.cljc", :line 64, :column 7, :end-line 64, :end-column 19, :arglists (quote ([shape])), :doc "returns true if the given object is a valid core.matrix array shape."}, :name clojure.core.matrix.utils/valid-shape?, :variadic false, :file "resources/public/js/clojure/core/matrix/utils.cljc", :end-column 19, :method-params ([shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shape])), :doc "returns true if the given object is a valid core.matrix array shape."}, protocol? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/utils.cljc", :line 246, :column 7, :end-line 246, :end-column 16, :arglists (quote ([p])), :doc "Returns true if an argument is a protocol'"}, :name clojure.core.matrix.utils/protocol?, :variadic false, :file "resources/public/js/clojure/core/matrix/utils.cljc", :end-column 16, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 246, :end-line 246, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Returns true if an argument is a protocol'"}, base-index-seq-for-shape {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/utils.cljc", :line 181, :column 7, :end-line 181, :end-column 31, :arglists (quote ([sh])), :doc "Returns a sequence of all possible index vectors for a given shape, in row-major order"}, :name clojure.core.matrix.utils/base-index-seq-for-shape, :variadic false, :file "resources/public/js/clojure/core/matrix/utils.cljc", :end-column 31, :method-params ([sh]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 181, :end-line 181, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sh])), :doc "Returns a sequence of all possible index vectors for a given shape, in row-major order"}, long-array-of {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/utils.cljc", :line 133, :column 7, :end-line 133, :end-column 20, :arglists (quote ([] [a] [a b] [a b & more])), :doc "Creates a long array with the specified values.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [a] [a b]), :arglists ([] [a] [a b] [a b & more]), :arglists-meta (nil nil nil nil)}}, :name clojure.core.matrix.utils/long-array-of, :variadic true, :file "resources/public/js/clojure/core/matrix/utils.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [a] [a b]), :arglists ([] [a] [a b] [a b & more]), :arglists-meta (nil nil nil nil)}, :method-params ([] [a] [a b]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 2, :fn-var true, :arglists ([] [a] [a b] [a b & more]), :doc "Creates a long array with the specified values."}, copy-double-array {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/utils.cljc", :line 98, :column 7, :end-line 98, :end-column 24, :arglists (quote ([arr])), :doc "Returns a copy of a double array"}, :name clojure.core.matrix.utils/copy-double-array, :variadic false, :file "resources/public/js/clojure/core/matrix/utils.cljc", :end-column 24, :method-params ([arr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arr])), :doc "Returns a copy of a double array"}, same-shape-object? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/utils.cljc", :line 72, :column 7, :end-line 72, :end-column 25, :arglists (quote ([sa sb])), :doc "Returns true if two shapes are the same."}, :name clojure.core.matrix.utils/same-shape-object?, :variadic false, :file "resources/public/js/clojure/core/matrix/utils.cljc", :end-column 25, :method-params ([sa sb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 2, :fn-var true, :arglists (quote ([sa sb])), :doc "Returns true if two shapes are the same."}, xor {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/utils.cljc", :line 87, :column 7, :end-line 87, :end-column 10, :arglists (quote ([] [x] [x y] [x y & more])), :doc "Returns the logical xor of a set of values, considered as booleans", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y] [x y & more]), :arglists-meta (nil nil nil nil)}}, :name clojure.core.matrix.utils/xor, :variadic true, :file "resources/public/js/clojure/core/matrix/utils.cljc", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y] [x y & more]), :arglists-meta (nil nil nil nil)}, :method-params ([] [x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 2, :fn-var true, :arglists ([] [x] [x y] [x y & more]), :doc "Returns the logical xor of a set of values, considered as booleans"}, update-indexed {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/utils.cljc", :line 282, :column 7, :end-line 282, :end-column 21, :arglists (quote ([xs idxs f]))}, :name clojure.core.matrix.utils/update-indexed, :variadic false, :file "resources/public/js/clojure/core/matrix/utils.cljc", :end-column 21, :method-params ([xs idxs f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 282, :end-line 282, :max-fixed-arity 3, :fn-var true, :arglists (quote ([xs idxs f]))}, class {:name clojure.core.matrix.utils/class, :file "resources/public/js/clojure/core/matrix/utils.cljc", :line 20, :column 1, :end-line 20, :end-column 11, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/utils.cljc", :line 20, :column 6, :end-line 20, :end-column 11}}, doseq-indexed {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/utils.cljc", :line 31, :column 11, :end-line 31, :end-column 24, :macro true, :arglists (quote ([[val-sym values index-sym] & code])), :doc "loops over a set of values, binding index-sym to the 0-based index of each value", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env [val-sym values index-sym] code)], :arglists ([&form &env [val-sym values index-sym] & code]), :arglists-meta (nil)}}, :name clojure.core.matrix.utils/doseq-indexed, :variadic true, :file "resources/public/js/clojure/core/matrix/utils.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env [val-sym values index-sym] code)], :arglists ([&form &env [val-sym values index-sym] & code]), :arglists-meta (nil)}, :method-params [(&form &env [val-sym values index-sym] code)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 31, :macro true, :end-line 31, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env [val-sym values index-sym] & code]), :doc "loops over a set of values, binding index-sym to the 0-based index of each value"}, object-array-of {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/utils.cljc", :line 152, :column 7, :end-line 152, :end-column 22, :arglists (quote ([] [a] [a b] [a b & more])), :doc "Creates a long array with the specified values.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [a] [a b]), :arglists ([] [a] [a b] [a b & more]), :arglists-meta (nil nil nil nil)}}, :name clojure.core.matrix.utils/object-array-of, :variadic true, :file "resources/public/js/clojure/core/matrix/utils.cljc", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [a] [a b]), :arglists ([] [a] [a b] [a b & more]), :arglists-meta (nil nil nil nil)}, :method-params ([] [a] [a b]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 152, :end-line 152, :max-fixed-arity 2, :fn-var true, :arglists ([] [a] [a b] [a b & more]), :doc "Creates a long array with the specified values."}, broadcast-shape {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/utils.cljc", :line 208, :column 7, :end-line 208, :end-column 22, :arglists (quote ([a] [a b])), :doc "Returns the smallest compatible shape that a set of shapes can all broadcast to.\n   Returns nil if this is not possible (i.e. the shapes are incompatible).\n   Returns an empty list if both shape sequences are empty (i.e. represent scalars)", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([a] [a b]), :arglists ([a] [a b]), :arglists-meta (nil nil)}}, :name clojure.core.matrix.utils/broadcast-shape, :variadic false, :file "resources/public/js/clojure/core/matrix/utils.cljc", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([a] [a b]), :arglists ([a] [a b]), :arglists-meta (nil nil)}, :method-params ([a] [a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 208, :end-line 208, :max-fixed-arity 2, :fn-var true, :arglists ([a] [a b]), :doc "Returns the smallest compatible shape that a set of shapes can all broadcast to.\n   Returns nil if this is not possible (i.e. the shapes are incompatible).\n   Returns an empty list if both shape sequences are empty (i.e. represent scalars)"}, can-broadcast {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/utils.cljc", :line 219, :column 7, :end-line 219, :end-column 20, :arglists (quote ([from-shape to-shape])), :doc "Returns truthy if the first shape a can be broadcast to the shape b"}, :name clojure.core.matrix.utils/can-broadcast, :variadic false, :file "resources/public/js/clojure/core/matrix/utils.cljc", :end-column 20, :method-params ([from-shape to-shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 2, :fn-var true, :arglists (quote ([from-shape to-shape])), :doc "Returns truthy if the first shape a can be broadcast to the shape b"}, long-range {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/utils.cljc", :line 116, :column 7, :end-line 116, :end-column 17, :arglists (quote ([end])), :doc "Returns a range of longs in a long[] array"}, :name clojure.core.matrix.utils/long-range, :variadic false, :file "resources/public/js/clojure/core/matrix/utils.cljc", :end-column 17, :method-params ([end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 1, :fn-var true, :arglists (quote ([end])), :doc "Returns a range of longs in a long[] array"}, broadcast-shape* {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/utils.cljc", :line 191, :column 8, :end-line 191, :end-column 24, :private true, :arglists (quote ([a b] [prefix a b])), :doc "Returns the smallest shape that both shapes a and b can broadcast to, or nil if the the shapes\n   are not compatible.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([a b] [prefix a b]), :arglists ([a b] [prefix a b]), :arglists-meta (nil nil)}}, :private true, :name clojure.core.matrix.utils/broadcast-shape*, :variadic false, :file "resources/public/js/clojure/core/matrix/utils.cljc", :end-column 24, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([a b] [prefix a b]), :arglists ([a b] [prefix a b]), :arglists-meta (nil nil)}, :method-params ([a b] [prefix a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 3, :fn-var true, :arglists ([a b] [prefix a b]), :doc "Returns the smallest shape that both shapes a and b can broadcast to, or nil if the the shapes\n   are not compatible."}, error {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/utils.cljc", :line 24, :column 11, :end-line 24, :end-column 16, :macro true, :arglists (quote ([& vals])), :doc "Throws an error with the provided message(s)", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env vals)], :arglists ([&form &env & vals]), :arglists-meta (nil)}}, :name clojure.core.matrix.utils/error, :variadic true, :file "resources/public/js/clojure/core/matrix/utils.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env vals)], :arglists ([&form &env & vals]), :arglists-meta (nil)}, :method-params [(&form &env vals)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 24, :macro true, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & vals]), :doc "Throws an error with the provided message(s)"}, find-index {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/utils.cljc", :line 171, :column 7, :end-line 171, :end-column 17, :arglists (quote ([v value])), :doc "Returns the index of a value in a vector, or nil if not present"}, :name clojure.core.matrix.utils/find-index, :variadic false, :file "resources/public/js/clojure/core/matrix/utils.cljc", :end-column 17, :method-params ([v value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 171, :end-line 171, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v value])), :doc "Returns the index of a value in a vector, or nil if not present"}}, :require-macros {clojure.core.matrix.macros clojure.core.matrix.macros}, :cljs.analyzer/constants {:seen #{cljs.core/str :else cljs.core/seq vals__20038__auto__ :name :file if :on-interface cljs.core/let cljs.core/long cljs.core/loop :line :var recur js/Error. cljs.core/next cljs.core/first throw cljs.core/inc}, :order [throw js/Error. cljs.core/str cljs.core/loop vals__20038__auto__ cljs.core/seq cljs.core/long if cljs.core/let cljs.core/first recur cljs.core/next cljs.core/inc :else :on-interface :var :line :file :name]}, :doc "Namespace for core.matrix utilities. Intended mainly for library and tool writers."}