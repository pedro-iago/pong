;; Analyzed by ClojureScript 1.7.228
{:use-macros {TODO clojure.core.matrix.macros, error clojure.core.matrix.macros}, :excludes #{}, :name clojure.core.matrix.implementations, :imports nil, :requires {mp clojure.core.matrix.protocols, clojure.core.matrix.protocols clojure.core.matrix.protocols, clojure.core.matrix.macros clojure.core.matrix.macros}, :uses nil, :defs {construct {:protocol-inline nil, :meta {:file "C:\\Users\\PedroIago\\Documents\\GitHub\\pong\\resources\\public\\js\\clojure\\core\\matrix\\implementations.cljc", :line 146, :column 7, :end-line 146, :end-column 16, :arglists (quote ([m data])), :doc "Attempts to construct an array according to the type of array m. If not possible,\n   returns another array type."}, :name clojure.core.matrix.implementations/construct, :variadic false, :file "resources\\public\\js\\clojure\\core\\matrix\\implementations.cljc", :end-column 16, :method-params ([m data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m data])), :doc "Attempts to construct an array according to the type of array m. If not possible,\n   returns another array type."}, *matrix-implementation* {:name clojure.core.matrix.implementations/*matrix-implementation*, :file "resources\\public\\js\\clojure\\core\\matrix\\implementations.cljc", :line 47, :column 1, :end-line 47, :end-column 39, :dynamic true, :meta {:file "C:\\Users\\PedroIago\\Documents\\GitHub\\pong\\resources\\public\\js\\clojure\\core\\matrix\\implementations.cljc", :line 47, :column 16, :end-line 47, :end-column 39, :dynamic true}, :doc "A dynamic var specifying the current core.matrix implementation in use.\n\n   May be re-bound to temporarily use a different core.matrix implementation."}, get-canonical-object-or-throw {:protocol-inline nil, :meta {:file "C:\\Users\\PedroIago\\Documents\\GitHub\\pong\\resources\\public\\js\\clojure\\core\\matrix\\implementations.cljc", :line 141, :column 7, :end-line 141, :end-column 36, :arglists (quote ([mk])), :doc "Like get-canonical-object, except it throws an exception if the implementation cannot be found"}, :name clojure.core.matrix.implementations/get-canonical-object-or-throw, :variadic false, :file "resources\\public\\js\\clojure\\core\\matrix\\implementations.cljc", :end-column 36, :method-params ([mk]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 141, :end-line 141, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mk])), :doc "Like get-canonical-object, except it throws an exception if the implementation cannot be found"}, load-implementation {:protocol-inline nil, :meta {:file "C:\\Users\\PedroIago\\Documents\\GitHub\\pong\\resources\\public\\js\\clojure\\core\\matrix\\implementations.cljc", :line 114, :column 7, :end-line 114, :end-column 26, :arglists (quote ([korm])), :doc "Attempts to load the implementation for a given keyword or matrix object.\n   Returns nil if not possible, a non-nil matrix value of the correct implementation otherwise."}, :name clojure.core.matrix.implementations/load-implementation, :variadic false, :file "resources\\public\\js\\clojure\\core\\matrix\\implementations.cljc", :end-column 26, :method-params ([korm]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([korm])), :doc "Attempts to load the implementation for a given keyword or matrix object.\n   Returns nil if not possible, a non-nil matrix value of the correct implementation otherwise."}, KNOWN-IMPLEMENTATIONS {:name clojure.core.matrix.implementations/KNOWN-IMPLEMENTATIONS, :file "resources\\public\\js\\clojure\\core\\matrix\\implementations.cljc", :line 12, :column 1, :end-line 12, :end-column 27, :meta {:file "C:\\Users\\PedroIago\\Documents\\GitHub\\pong\\resources\\public\\js\\clojure\\core\\matrix\\implementations.cljc", :line 12, :column 6, :end-line 12, :end-column 27}, :doc "A map of known core.matrix implementation namespaces.\n\n   core.matrix will attempt to load these namespaces when an array of the specified\n   keyword type is requested."}, *debug-options* {:name clojure.core.matrix.implementations/*debug-options*, :file "resources\\public\\js\\clojure\\core\\matrix\\implementations.cljc", :line 53, :column 1, :end-line 60, :end-column 18, :doc "A dynamic var supporting debugging option for core.matrix implementers.\n\n   Currently supported values:\n     :print-registrations  - print when core.matrix implementations are registered\n     :reload-namespaces  - require :reload implementation namespaces when setting the current implementation", :dynamic true, :meta {:file "C:\\Users\\PedroIago\\Documents\\GitHub\\pong\\resources\\public\\js\\clojure\\core\\matrix\\implementations.cljc", :line 60, :column 3, :end-line 60, :end-column 18, :doc "A dynamic var supporting debugging option for core.matrix implementers.\n\n   Currently supported values:\n     :print-registrations  - print when core.matrix implementations are registered\n     :reload-namespaces  - require :reload implementation namespaces when setting the current implementation", :dynamic true}}, set-current-implementation {:protocol-inline nil, :meta {:file "C:\\Users\\PedroIago\\Documents\\GitHub\\pong\\resources\\public\\js\\clojure\\core\\matrix\\implementations.cljc", :line 156, :column 7, :end-line 156, :end-column 33, :arglists (quote ([m])), :doc "Sets the currently active core.matrix implementation.\n\n   Parameter may be\n    - A known keyword for the implementation e.g. :vectorz\n    - An existing instance from the implementation\n\n   This is used primarily for functions that construct new matrices, i.e. it determines the\n   implementation used for expressions like: (matrix [[1 2] [3 4]])"}, :name clojure.core.matrix.implementations/set-current-implementation, :variadic false, :file "resources\\public\\js\\clojure\\core\\matrix\\implementations.cljc", :end-column 33, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 156, :end-line 156, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Sets the currently active core.matrix implementation.\n\n   Parameter may be\n    - A known keyword for the implementation e.g. :vectorz\n    - An existing instance from the implementation\n\n   This is used primarily for functions that construct new matrices, i.e. it determines the\n   implementation used for expressions like: (matrix [[1 2] [3 4]])"}, register-implementation {:protocol-inline nil, :meta {:file "C:\\Users\\PedroIago\\Documents\\GitHub\\pong\\resources\\public\\js\\clojure\\core\\matrix\\implementations.cljc", :line 79, :column 7, :end-line 79, :end-column 30, :arglists (quote ([canonical-object] [key canonical-object])), :doc "Registers a matrix implementation for use. Should be called by all implementations\n   when they are loaded, once for each implementation keyword registered. Safe to call multiple times.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([canonical-object] [key canonical-object]), :arglists ([canonical-object] [key canonical-object]), :arglists-meta (nil nil)}}, :name clojure.core.matrix.implementations/register-implementation, :variadic false, :file "resources\\public\\js\\clojure\\core\\matrix\\implementations.cljc", :end-column 30, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([canonical-object] [key canonical-object]), :arglists ([canonical-object] [key canonical-object]), :arglists-meta (nil nil)}, :method-params ([canonical-object] [key canonical-object]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists ([canonical-object] [key canonical-object]), :doc "Registers a matrix implementation for use. Should be called by all implementations\n   when they are loaded, once for each implementation keyword registered. Safe to call multiple times."}, try-load-implementation {:protocol-inline nil, :meta {:file "C:\\Users\\PedroIago\\Documents\\GitHub\\pong\\resources\\public\\js\\clojure\\core\\matrix\\implementations.cljc", :line 94, :column 8, :end-line 94, :end-column 31, :private true, :arglists (quote ([k])), :doc "Attempts to load an implementation for the given keyword.\n   Returns nil if not possible, a non-nil matrix value of the correct implementation otherwise."}, :private true, :name clojure.core.matrix.implementations/try-load-implementation, :variadic false, :file "resources\\public\\js\\clojure\\core\\matrix\\implementations.cljc", :end-column 31, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "Attempts to load an implementation for the given keyword.\n   Returns nil if not possible, a non-nil matrix value of the correct implementation otherwise."}, canonical-objects {:name clojure.core.matrix.implementations/canonical-objects, :file "resources\\public\\js\\clojure\\core\\matrix\\implementations.cljc", :line 63, :column 1, :end-line 69, :end-column 20, :doc "An atom holding a map of canonical objects for each loaded core.matrix implementation.\n\n   Canonical objects may be used to invoke protocol methods on an instance of the correct\n   type to get implementation-specific behaviour. Canonical objects are required to support\n   all mandatory core.matrix protocols.", :meta {:file "C:\\Users\\PedroIago\\Documents\\GitHub\\pong\\resources\\public\\js\\clojure\\core\\matrix\\implementations.cljc", :line 69, :column 3, :end-line 69, :end-column 20, :doc "An atom holding a map of canonical objects for each loaded core.matrix implementation.\n\n   Canonical objects may be used to invoke protocol methods on an instance of the correct\n   type to get implementation-specific behaviour. Canonical objects are required to support\n   all mandatory core.matrix protocols."}}, DEFAULT-IMPLEMENTATION {:name clojure.core.matrix.implementations/DEFAULT-IMPLEMENTATION, :file "resources\\public\\js\\clojure\\core\\matrix\\implementations.cljc", :line 41, :column 1, :end-line 41, :end-column 28, :meta {:file "C:\\Users\\PedroIago\\Documents\\GitHub\\pong\\resources\\public\\js\\clojure\\core\\matrix\\implementations.cljc", :line 41, :column 6, :end-line 41, :end-column 28}, :doc "The default implementation used in core.matrix. Currently set to `:persistent-vector` for maximum\n   compatibility with regular Clojure code."}, get-implementation-key {:protocol-inline nil, :meta {:file "C:\\Users\\PedroIago\\Documents\\GitHub\\pong\\resources\\public\\js\\clojure\\core\\matrix\\implementations.cljc", :line 71, :column 7, :end-line 71, :end-column 29, :arglists (quote ([m])), :doc "Returns the implementation keyword  for a given object"}, :name clojure.core.matrix.implementations/get-implementation-key, :variadic false, :file "resources\\public\\js\\clojure\\core\\matrix\\implementations.cljc", :end-column 29, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns the implementation keyword  for a given object"}, get-canonical-object {:protocol-inline nil, :meta {:file "C:\\Users\\PedroIago\\Documents\\GitHub\\pong\\resources\\public\\js\\clojure\\core\\matrix\\implementations.cljc", :line 122, :column 7, :end-line 122, :end-column 27, :arglists (quote ([] [m])), :doc "Gets the canonical object for a specific implementation. The canonical object is used\n   to call implementation-specific protocol functions where required (e.g. creation of new\n   arrays of the correct type for the implementation).\n\n   Returns nil if the implementation cannot be found.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [m]), :arglists ([] [m]), :arglists-meta (nil nil)}}, :name clojure.core.matrix.implementations/get-canonical-object, :variadic false, :file "resources\\public\\js\\clojure\\core\\matrix\\implementations.cljc", :end-column 27, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [m]), :arglists ([] [m]), :arglists-meta (nil nil)}, :method-params ([] [m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 1, :fn-var true, :arglists ([] [m]), :doc "Gets the canonical object for a specific implementation. The canonical object is used\n   to call implementation-specific protocol functions where required (e.g. creation of new\n   arrays of the correct type for the implementation).\n\n   Returns nil if the implementation cannot be found."}}, :require-macros {clojure.core.matrix.macros clojure.core.matrix.macros}, :cljs.analyzer/constants {:seen #{clojure.core.matrix.impl.ndarray-double :ndarray-long :ejml clojure.core.matrix.impl.wrappers :persistent-map :else cav.mtj.core.matrix :clojure :double-array clatrix.core :persistent-vector thinktopic.aljabr.core mikera.vectorz.matrix-api :print-registrations :commons-math clojure.core.matrix.impl.sequence :jblas :mtj clojure.core.matrix.impl.ndarray clojure.core.matrix.impl.dataset :clatrix :scalar-wrapper clojure.core.matrix.impl.sparse-map :sequence :ndarray-float :reload-namespaces :TODO :ujmp :nd-wrapper :ndarray :parallel-colt clojure.core.matrix.impl.ndarray-object :ndarray-double :aljabr clojure.core.matrix.impl.double-array clojure.core.matrix.impl.persistent-vector clojure.core.matrix.impl.clojure :dataset :vectorz apache-commons-matrix.core :slice-wrapper}, :order [:vectorz :clojure :ndarray :ndarray-double :ndarray-float :ndarray-long :persistent-vector :persistent-map :sequence :double-array :scalar-wrapper :slice-wrapper :nd-wrapper :dataset :jblas :clatrix :parallel-colt :ejml :ujmp :commons-math :mtj :aljabr mikera.vectorz.matrix-api clojure.core.matrix.impl.clojure clojure.core.matrix.impl.ndarray-object clojure.core.matrix.impl.ndarray-double clojure.core.matrix.impl.ndarray clojure.core.matrix.impl.persistent-vector clojure.core.matrix.impl.sparse-map clojure.core.matrix.impl.sequence clojure.core.matrix.impl.double-array clojure.core.matrix.impl.wrappers clojure.core.matrix.impl.dataset :TODO clatrix.core apache-commons-matrix.core cav.mtj.core.matrix thinktopic.aljabr.core :print-registrations :reload-namespaces :else]}, :doc "Namespace for management of core.matrix implementations. Users should avoid using these\n   functions directly as they are intended for library and tool writers."}