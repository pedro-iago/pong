;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{array?}, :name clojure.core.matrix.macros, :imports nil, :requires nil, :uses nil, :defs {is-double-array? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/macros.cljc", :line 62, :column 11, :end-line 62, :end-column 27, :macro true, :arglists (quote ([m]))}, :name clojure.core.matrix.macros/is-double-array?, :variadic false, :file "resources/public/js/clojure/core/matrix/macros.cljc", :end-column 27, :method-params ([&form &env m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :macro true, :end-line 62, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m]))}, is-long-array? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/macros.cljc", :line 58, :column 11, :end-line 58, :end-column 25, :macro true, :arglists (quote ([m]))}, :name clojure.core.matrix.macros/is-long-array?, :variadic false, :file "resources/public/js/clojure/core/matrix/macros.cljc", :end-column 25, :method-params ([&form &env m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :macro true, :end-line 58, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m]))}, iae-when-not {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/macros.cljc", :line 37, :column 11, :end-line 37, :end-column 23, :macro true, :arglists (quote ([pred? exception-str])), :doc "Throws an IllegalArgumentException when the predicate is not satisfied"}, :name clojure.core.matrix.macros/iae-when-not, :variadic false, :file "resources/public/js/clojure/core/matrix/macros.cljc", :end-column 23, :method-params ([&form &env pred? exception-str]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :macro true, :end-line 37, :max-fixed-arity 4, :fn-var true, :arglists (quote ([pred? exception-str])), :doc "Throws an IllegalArgumentException when the predicate is not satisfied"}, c-for {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/macros.cljc", :line 66, :column 11, :end-line 66, :end-column 16, :macro true, :arglists (quote ([loops & body])), :doc "C-like loop with nested loops support", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env loops body)], :arglists ([&form &env loops & body]), :arglists-meta (nil)}}, :name clojure.core.matrix.macros/c-for, :variadic true, :file "resources/public/js/clojure/core/matrix/macros.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env loops body)], :arglists ([&form &env loops & body]), :arglists-meta (nil)}, :method-params [(&form &env loops body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 66, :macro true, :end-line 66, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env loops & body]), :doc "C-like loop with nested loops support"}, scalar-coerce {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/macros.cljc", :line 79, :column 11, :end-line 79, :end-column 24, :macro true, :arglists (quote ([x])), :doc "Macro to coerce to scalar value with an efficient dispatch sequence"}, :name clojure.core.matrix.macros/scalar-coerce, :variadic false, :file "resources/public/js/clojure/core/matrix/macros.cljc", :end-column 24, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :macro true, :end-line 79, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :doc "Macro to coerce to scalar value with an efficient dispatch sequence"}, iae {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/macros.cljc", :line 32, :column 11, :end-line 32, :end-column 14, :macro true, :arglists (quote ([exception-str])), :doc "Throws IllegalArgumentException with provided string"}, :name clojure.core.matrix.macros/iae, :variadic false, :file "resources/public/js/clojure/core/matrix/macros.cljc", :end-column 14, :method-params ([&form &env exception-str]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :macro true, :end-line 32, :max-fixed-arity 3, :fn-var true, :arglists (quote ([exception-str])), :doc "Throws IllegalArgumentException with provided string"}, doseq-indexed {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/macros.cljc", :line 43, :column 11, :end-line 43, :end-column 24, :macro true, :arglists (quote ([[val-sym values index-sym] & code])), :doc "loops over a set of values, binding index-sym to the 0-based index of each value", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env [val-sym values index-sym] code)], :arglists ([&form &env [val-sym values index-sym] & code]), :arglists-meta (nil)}}, :name clojure.core.matrix.macros/doseq-indexed, :variadic true, :file "resources/public/js/clojure/core/matrix/macros.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env [val-sym values index-sym] code)], :arglists ([&form &env [val-sym values index-sym] & code]), :arglists-meta (nil)}, :method-params [(&form &env [val-sym values index-sym] code)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 43, :macro true, :end-line 43, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env [val-sym values index-sym] & code]), :doc "loops over a set of values, binding index-sym to the 0-based index of each value"}, array? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/macros.cljc", :line 87, :column 11, :end-line 87, :end-column 17, :macro true, :arglists (quote ([m])), :doc "Returns true if the parameter is an N-dimensional array of any type"}, :name clojure.core.matrix.macros/array?, :variadic false, :file "resources/public/js/clojure/core/matrix/macros.cljc", :end-column 17, :method-params ([&form &env m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :macro true, :end-line 87, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m])), :doc "Returns true if the parameter is an N-dimensional array of any type"}, TODO {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/macros.cljc", :line 28, :column 11, :end-line 28, :end-column 15, :macro true, :arglists (quote ([] [& vals])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & vals]), :arglists-meta (nil nil)}}, :name clojure.core.matrix.macros/TODO, :variadic true, :file "resources/public/js/clojure/core/matrix/macros.cljc", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & vals]), :arglists-meta (nil nil)}, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :macro true, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env] [&form &env & vals])}, error {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/macros.cljc", :line 6, :column 11, :end-line 6, :end-column 16, :macro true, :arglists (quote ([& vals])), :doc "Throws an error with the provided message(s)", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env vals)], :arglists ([&form &env & vals]), :arglists-meta (nil)}}, :name clojure.core.matrix.macros/error, :variadic true, :file "resources/public/js/clojure/core/matrix/macros.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env vals)], :arglists ([&form &env & vals]), :arglists-meta (nil)}, :method-params [(&form &env vals)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 6, :macro true, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & vals]), :doc "Throws an error with the provided message(s)"}, is-object-array? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/macros.cljc", :line 54, :column 11, :end-line 54, :end-column 27, :macro true, :arglists (quote ([m]))}, :name clojure.core.matrix.macros/is-object-array?, :variadic false, :file "resources/public/js/clojure/core/matrix/macros.cljc", :end-column 27, :method-params ([&form &env m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :macro true, :end-line 54, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{clojure.core.matrix.protocols/get-0d cljs.core/str clojure.core.matrix.protocols/is-scalar? cljs.core/when cljs.core/= clojure.core.matrix.macros/iae :else cljs.core/seq cljs.core/when-not do x__20109__auto__ clojure.core.matrix.macros/error if vals__19971__auto__ cljs.core/let cljs.core/number? cljs.core/long cljs.core/cond js/Array cljs.core/loop recur cljs.core/ex-info cljs.core/next cljs.core/not cljs.core/first throw cljs.core/type cljs.core/inc IllegalArgumentException.}, :order [throw cljs.core/ex-info cljs.core/str clojure.core.matrix.macros/error IllegalArgumentException. cljs.core/when-not clojure.core.matrix.macros/iae cljs.core/loop vals__19971__auto__ cljs.core/seq cljs.core/long if cljs.core/let cljs.core/first recur cljs.core/next cljs.core/inc cljs.core/= js/Array cljs.core/type cljs.core/when do x__20109__auto__ cljs.core/cond cljs.core/number? :else clojure.core.matrix.protocols/get-0d cljs.core/not clojure.core.matrix.protocols/is-scalar?]}, :doc "Namespace for core.matrix macros. Keeping them separate allows us to do conditional\n  macros that can handle the differences between Clojure and Clojurescript."}