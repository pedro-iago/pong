;; Analyzed by ClojureScript 1.7.228
{:use-macros {eps== clojure.core.matrix.macros-cljs, native-array? clojure.core.matrix.macros-cljs, c-for clojure.core.matrix.macros, scalar-coerce clojure.core.matrix.macros, def-PMathsFunctionsMutable clojure.core.matrix.impl.defaults, def-PMathsFunctions clojure.core.matrix.impl.defaults, try-current-implementation clojure.core.matrix.macros-cljs, doseq-indexed clojure.core.matrix.macros, array? clojure.core.matrix.macros, TODO clojure.core.matrix.macros, error clojure.core.matrix.macros}, :excludes #{}, :name clojure.core.matrix.impl.defaults, :imports nil, :requires {da clojure.core.matrix.impl.double-array, clojure.core.matrix.impl.mathsops clojure.core.matrix.impl.mathsops, mp clojure.core.matrix.protocols, clojure.core.matrix.impl.wrappers clojure.core.matrix.impl.wrappers, u clojure.core.matrix.utils, wrap clojure.core.matrix.impl.wrappers, clojure.core.matrix.implementations clojure.core.matrix.implementations, clojure.core.matrix.utils clojure.core.matrix.utils, mops clojure.core.matrix.impl.mathsops, imp clojure.core.matrix.implementations, clojure.core.matrix.impl.double-array clojure.core.matrix.impl.double-array, clojure.core.matrix.protocols clojure.core.matrix.protocols, clojure.core.matrix.impl.common clojure.core.matrix.impl.common}, :uses {to-radians* clojure.core.matrix.impl.mathsops, softplus-fn clojure.core.matrix.impl.common, square? clojure.core.matrix.impl.common, logistic-fn clojure.core.matrix.impl.common, relu-fn clojure.core.matrix.impl.common, to-degrees* clojure.core.matrix.impl.mathsops, mapmatrix clojure.core.matrix.impl.common, symmetric-matrix-entries? clojure.core.matrix.impl.common}, :defs {indices {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/defaults.cljc", :line 2239, :column 8, :end-line 2239, :end-column 15, :private true, :arglists (quote ([vals]))}, :private true, :name clojure.core.matrix.impl.defaults/indices, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/defaults.cljc", :end-column 15, :method-params ([vals]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2239, :end-line 2239, :max-fixed-arity 1, :fn-var true, :arglists (quote ([vals]))}, calc-element-count {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/defaults.cljc", :line 42, :column 8, :end-line 42, :end-column 26, :private true, :arglists (quote ([m])), :doc "Returns the total count of elements in an array"}, :private true, :name clojure.core.matrix.impl.defaults/calc-element-count, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/defaults.cljc", :end-column 26, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns the total count of elements in an array"}, area-indices {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/defaults.cljc", :line 2234, :column 8, :end-line 2234, :end-column 20, :private true, :arglists (quote ([area]))}, :private true, :name clojure.core.matrix.impl.defaults/area-indices, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/defaults.cljc", :end-column 20, :method-params ([area]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2234, :end-line 2234, :max-fixed-arity 1, :fn-var true, :arglists (quote ([area]))}, cart {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/defaults.cljc", :line 1463, :column 8, :end-line 1463, :end-column 12, :private true, :arglists (quote ([colls]))}, :private true, :name clojure.core.matrix.impl.defaults/cart, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/defaults.cljc", :end-column 12, :method-params ([colls]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1463, :end-line 1463, :max-fixed-arity 1, :fn-var true, :arglists (quote ([colls]))}, compute-r {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/defaults.cljc", :line 2348, :column 7, :end-line 2348, :end-column 16, :arglists (quote ([m data mcols mrows min-len compact?]))}, :name clojure.core.matrix.impl.defaults/compute-r, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/defaults.cljc", :end-column 16, :method-params ([m data mcols mrows min-len compact?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2348, :end-line 2348, :max-fixed-arity 6, :fn-var true, :arglists (quote ([m data mcols mrows min-len compact?]))}, construct-mutable-matrix {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/defaults.cljc", :line 51, :column 7, :end-line 51, :end-column 31, :arglists (quote ([m])), :doc "Constructs a new mutable matrix with the given data."}, :name clojure.core.matrix.impl.defaults/construct-mutable-matrix, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/defaults.cljc", :end-column 31, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Constructs a new mutable matrix with the given data."}, householder-qr {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/defaults.cljc", :line 2370, :column 7, :end-line 2370, :end-column 21, :arglists (quote ([qr-data idx mcols mrows us gammas]))}, :name clojure.core.matrix.impl.defaults/householder-qr, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/defaults.cljc", :end-column 21, :method-params ([qr-data idx mcols mrows us gammas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2370, :end-line 2370, :max-fixed-arity 6, :fn-var true, :arglists (quote ([qr-data idx mcols mrows us gammas]))}, update-qr {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/defaults.cljc", :line 2405, :column 7, :end-line 2405, :end-column 16, :arglists (quote ([qr-data idx mcols mrows vs us gamma tau]))}, :name clojure.core.matrix.impl.defaults/update-qr, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/defaults.cljc", :end-column 16, :method-params ([qr-data idx mcols mrows vs us gamma tau]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2405, :end-line 2405, :max-fixed-arity 8, :fn-var true, :arglists (quote ([qr-data idx mcols mrows vs us gamma tau]))}, compute-q {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/defaults.cljc", :line 2305, :column 7, :end-line 2305, :end-column 16, :arglists (quote ([m qr-data mcols mrows min-len us vs gammas]))}, :name clojure.core.matrix.impl.defaults/compute-q, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/defaults.cljc", :end-column 16, :method-params ([m qr-data mcols mrows min-len us vs gammas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2305, :end-line 2305, :max-fixed-arity 8, :fn-var true, :arglists (quote ([m qr-data mcols mrows min-len us vs gammas]))}, indices-seq {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/defaults.cljc", :line 1470, :column 8, :end-line 1470, :end-column 19, :private true, :arglists (quote ([m]))}, :private true, :name clojure.core.matrix.impl.defaults/indices-seq, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/defaults.cljc", :end-column 19, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1470, :end-line 1470, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, *trying-current-implementation* {:name clojure.core.matrix.impl.defaults/*trying-current-implementation*, :file "resources/public/js/clojure/core/matrix/impl/defaults.cljc", :line 19, :column 1, :end-line 19, :end-column 47, :dynamic true, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/defaults.cljc", :line 19, :column 16, :end-line 19, :end-column 47, :dynamic true}}}, :require-macros {clojure.core.matrix.impl.defaults clojure.core.matrix.impl.defaults, clojure.core.matrix.macros clojure.core.matrix.macros, clojure.core.matrix.macros-cljs clojure.core.matrix.macros-cljs, wrap clojure.core.matrix.impl.wrappers, clojure.core.matrix.impl.wrappers clojure.core.matrix.impl.wrappers, mops clojure.core.matrix.impl.mathsops, clojure.core.matrix.impl.mathsops clojure.core.matrix.impl.mathsops}, :cljs.analyzer/constants {:seen #{:R :else :return :default :Q :compact :us :qr-data :gammas :gamma :error :tau :ndarray :aljabr :vs :vectorz}, :order [:else :aljabr :default :vectorz :ndarray :error :gamma :gammas :us :tau :qr-data :vs :Q :R :compact :return]}, :doc nil}