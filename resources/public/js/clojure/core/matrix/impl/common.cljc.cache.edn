;; Analyzed by ClojureScript 1.7.228
{:use-macros {scalar-coerce clojure.core.matrix.macros}, :excludes #{}, :name clojure.core.matrix.impl.common, :imports nil, :requires {s clojure.string, clojure.string clojure.string, mp clojure.core.matrix.protocols, clojure.core.matrix.protocols clojure.core.matrix.protocols, u clojure.core.matrix.utils, clojure.core.matrix.utils clojure.core.matrix.utils, mi clojure.core.matrix.implementations, clojure.core.matrix.implementations clojure.core.matrix.implementations}, :uses nil, :defs {get-impl-objs {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/common.cljc", :line 11, :column 7, :end-line 11, :end-column 20, :arglists (quote ([])), :doc "Returns a list of available implementations' objects"}, :name clojure.core.matrix.impl.common/get-impl-objs, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/common.cljc", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns a list of available implementations' objects"}, mapmatrix {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/common.cljc", :line 48, :column 7, :end-line 48, :end-column 16, :arglists (quote ([f m] [f m1 m2] [f m1 m2 m3] [f m1 m2 m3 & more])), :doc "Maps a function over all components of a persistent vector matrix. Like mapv but for matrices.\n   Assumes correct dimensionality / shape.\n\n   First array argument must be nested persistent vectors. Others may be\n   any arrays of the same shape.\n\n   Returns a nested persistent vector matrix or a scalar value.", :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([f m] [f m1 m2] [f m1 m2 m3]), :arglists ([f m] [f m1 m2] [f m1 m2 m3] [f m1 m2 m3 & more]), :arglists-meta (nil nil nil nil)}}, :name clojure.core.matrix.impl.common/mapmatrix, :variadic true, :file "resources/public/js/clojure/core/matrix/impl/common.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([f m] [f m1 m2] [f m1 m2 m3]), :arglists ([f m] [f m1 m2] [f m1 m2 m3] [f m1 m2 m3 & more]), :arglists-meta (nil nil nil nil)}, :method-params ([f m] [f m1 m2] [f m1 m2 m3]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 4, :fn-var true, :arglists ([f m] [f m1 m2] [f m1 m2 m3] [f m1 m2 m3 & more]), :doc "Maps a function over all components of a persistent vector matrix. Like mapv but for matrices.\n   Assumes correct dimensionality / shape.\n\n   First array argument must be nested persistent vectors. Others may be\n   any arrays of the same shape.\n\n   Returns a nested persistent vector matrix or a scalar value."}, logistic-fn {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/common.cljc", :line 106, :column 7, :end-line 106, :end-column 18, :arglists (quote ([t])), :doc "Logistic function, with primitive type hints"}, :name clojure.core.matrix.impl.common/logistic-fn, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/common.cljc", :end-column 18, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Logistic function, with primitive type hints"}, softplus-fn {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/common.cljc", :line 112, :column 7, :end-line 112, :end-column 18, :arglists (quote ([t])), :doc "Softplus function, with primitive type hints"}, :name clojure.core.matrix.impl.common/softplus-fn, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/common.cljc", :end-column 18, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Softplus function, with primitive type hints"}, relu-fn {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/common.cljc", :line 120, :column 7, :end-line 120, :end-column 14, :arglists (quote ([t])), :doc "ReLU function, with primitive type hints"}, :name clojure.core.matrix.impl.common/relu-fn, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/common.cljc", :end-column 14, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "ReLU function, with primitive type hints"}, square? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/common.cljc", :line 125, :column 7, :end-line 125, :end-column 14, :arglists (quote ([m])), :doc "Returns true if matrix is square (2D with same number of rows and columns)"}, :name clojure.core.matrix.impl.common/square?, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/common.cljc", :end-column 14, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns true if matrix is square (2D with same number of rows and columns)"}, symmetric-matrix-entries? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/common.cljc", :line 135, :column 7, :end-line 135, :end-column 32, :arglists (quote ([m])), :doc "Returns true iff square matrix m is symmetric."}, :name clojure.core.matrix.impl.common/symmetric-matrix-entries?, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/common.cljc", :end-column 32, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 135, :end-line 135, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns true iff square matrix m is symmetric."}}, :require-macros {clojure.core.matrix.macros clojure.core.matrix.macros}, :cljs.analyzer/constants {:seen #{:else :name :persistent-vector :TODO :obj}, :order [:persistent-vector :TODO :else :name :obj]}, :doc "Namespace containing common functions useful for core.matrix implementatations"}