;; Analyzed by ClojureScript 1.7.228
{:use-macros {native-array? clojure.core.matrix.macros-cljs, scalar-coerce clojure.core.matrix.macros, vector-1d? clojure.core.matrix.impl.persistent-vector, doseq-indexed clojure.core.matrix.macros, error clojure.core.matrix.macros}, :excludes #{}, :name clojure.core.matrix.impl.persistent-vector, :imports nil, :requires {mp clojure.core.matrix.protocols, clojure.core.matrix.protocols clojure.core.matrix.protocols, imp clojure.core.matrix.implementations, clojure.core.matrix.implementations clojure.core.matrix.implementations, clojure.core.matrix.impl.common clojure.core.matrix.impl.common, mops clojure.core.matrix.impl.mathsops, clojure.core.matrix.impl.mathsops clojure.core.matrix.impl.mathsops}, :uses {mapmatrix clojure.core.matrix.impl.common}, :defs {persistent-vector-coerce {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/persistent_vector.cljc", :line 92, :column 7, :end-line 92, :end-column 31, :arglists (quote ([x])), :doc "Coerces to nested persistent vectors"}, :name clojure.core.matrix.impl.persistent-vector/persistent-vector-coerce, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/persistent_vector.cljc", :end-column 31, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Coerces to nested persistent vectors"}, coerce-nested {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/persistent_vector.cljc", :line 47, :column 7, :end-line 47, :end-column 20, :arglists (quote ([v])), :doc "Ensures a vector is fully coerced to nested persistent vectors"}, :name clojure.core.matrix.impl.persistent-vector/coerce-nested, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/persistent_vector.cljc", :end-column 20, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Ensures a vector is fully coerced to nested persistent vectors"}, mapv-identity-check {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/persistent_vector.cljc", :line 60, :column 8, :end-line 60, :end-column 27, :private true, :arglists (quote ([f v])), :doc "Maps a function over a persistent vector, only modifying the vector if the function\n   returns a different value"}, :private true, :name clojure.core.matrix.impl.persistent-vector/mapv-identity-check, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/persistent_vector.cljc", :end-column 27, :method-params ([f v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f v])), :doc "Maps a function over a persistent vector, only modifying the vector if the function\n   returns a different value"}, check-vector-shape {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/persistent_vector.cljc", :line 72, :column 8, :end-line 72, :end-column 26, :private true, :arglists (quote ([v shape]))}, :private true, :name clojure.core.matrix.impl.persistent-vector/check-vector-shape, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/persistent_vector.cljc", :end-column 26, :method-params ([v shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v shape]))}, is-nested-persistent-vectors? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/persistent_vector.cljc", :line 81, :column 7, :end-line 81, :end-column 36, :arglists (quote ([x])), :doc "Test if array is already in nested persistent vector array format."}, :name clojure.core.matrix.impl.persistent-vector/is-nested-persistent-vectors?, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/persistent_vector.cljc", :end-column 36, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Test if array is already in nested persistent vector array format."}, vector-dimensionality {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/persistent_vector.cljc", :line 110, :column 7, :end-line 110, :end-column 28, :arglists (quote ([m])), :doc "Calculates the dimensionality (== nesting depth) of nested persistent vectors"}, :name clojure.core.matrix.impl.persistent-vector/vector-dimensionality, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/persistent_vector.cljc", :end-column 28, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Calculates the dimensionality (== nesting depth) of nested persistent vectors"}, build-maths-function {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/persistent_vector.cljc", :line 484, :column 7, :end-line 484, :end-column 27, :arglists (quote ([[name func]]))}, :name clojure.core.matrix.impl.persistent-vector/build-maths-function, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/persistent_vector.cljc", :end-column 27, :method-params ([p__29454]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 484, :end-line 484, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[name func]]))}, copy-to-double-array {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/persistent_vector.cljc", :line 549, :column 8, :end-line 549, :end-column 28, :private true, :arglists (quote ([m arr off size]))}, :private true, :name clojure.core.matrix.impl.persistent-vector/copy-to-double-array, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/persistent_vector.cljc", :end-column 28, :method-params ([m arr off size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 549, :end-line 549, :max-fixed-arity 4, :fn-var true, :arglists (quote ([m arr off size]))}, copy-to-object-array {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/persistent_vector.cljc", :line 585, :column 8, :end-line 585, :end-column 28, :private true, :arglists (quote ([m arr off size]))}, :private true, :name clojure.core.matrix.impl.persistent-vector/copy-to-object-array, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/persistent_vector.cljc", :end-column 28, :method-params ([m arr off size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 585, :end-line 585, :max-fixed-arity 4, :fn-var true, :arglists (quote ([m arr off size]))}}, :require-macros {clojure.core.matrix.impl.persistent-vector clojure.core.matrix.impl.persistent-vector, clojure.core.matrix.macros clojure.core.matrix.macros, clojure.core.matrix.macros-cljs clojure.core.matrix.macros-cljs, mops clojure.core.matrix.impl.mathsops, clojure.core.matrix.impl.mathsops clojure.core.matrix.impl.mathsops}, :cljs.analyzer/constants {:seen #{clojure.core.matrix.impl.common/mapmatrix :else :default :persistent-vector m cljs.core/double cljs.core/fn :doc x__29453__auto__}, :order [:else :default :persistent-vector :doc m clojure.core.matrix.impl.common/mapmatrix cljs.core/fn x__29453__auto__ cljs.core/double]}, :doc "Namespace for core.matrix implementation using nested persistent vectors.\n\n   Array format is defined as:\n   - Top level object is an instance of clojure.lang.IPersistentVector\n   - If the array is 1-dimensional each element is a scalar\n   - Otherwise each element is an sub-array with identical shape (1 dimensional or more)\n\n   Note that this allows for other array implementations to be nested inside persistent vectors."}