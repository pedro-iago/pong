;; Analyzed by ClojureScript 1.7.228
{:use-macros {set-source-index clojure.core.matrix.impl.wrappers, c-for clojure.core.matrix.macros, areverse clojure.core.matrix.macros-cljs, abutnth clojure.core.matrix.macros-cljs, TODO clojure.core.matrix.macros, error clojure.core.matrix.macros}, :excludes #{}, :name clojure.core.matrix.impl.wrappers, :imports nil, :requires {mp clojure.core.matrix.protocols, clojure.core.matrix.protocols clojure.core.matrix.protocols, imp clojure.core.matrix.implementations, clojure.core.matrix.implementations clojure.core.matrix.implementations, clojure.core.matrix.impl.persistent-vector clojure.core.matrix.impl.persistent-vector, u clojure.core.matrix.utils, clojure.core.matrix.utils clojure.core.matrix.utils}, :uses nil, :defs {wrap-scalar {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/wrappers.cljc", :line 436, :column 7, :end-line 436, :end-column 18, :arglists (quote ([m])), :doc "Wraps a scalar value into a mutable 0D array."}, :name clojure.core.matrix.impl.wrappers/wrap-scalar, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/wrappers.cljc", :end-column 18, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 436, :end-line 436, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Wraps a scalar value into a mutable 0D array."}, wrap-broadcast {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/wrappers.cljc", :line 408, :column 7, :end-line 408, :end-column 21, :arglists (quote ([m target-shape])), :doc "Wraps an array with broadcasting to the given target shape."}, :name clojure.core.matrix.impl.wrappers/wrap-broadcast, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/wrappers.cljc", :end-column 21, :method-params ([m target-shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 408, :end-line 408, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m target-shape])), :doc "Wraps an array with broadcasting to the given target shape."}, ->NDWrapper {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/wrappers.cljc", :line 218, :column 10, :end-line 218, :end-column 19, :protocols #{clojure.core.matrix.protocols/PDimensionInfo clojure.core.matrix.protocols/PIndexedSettingMutable cljs.core/IIndexed clojure.core.matrix.protocols/PSubVector clojure.core.matrix.protocols/PIndexedAccess clojure.core.matrix.protocols/PSliceView2 clojure.core.matrix.protocols/PIndexedSetting cljs.core/ICounted clojure.core.matrix.protocols/PImplementation cljs.core/ISeqable clojure.core.matrix.protocols/PZeroDimensionAccess clojure.core.matrix.impl.wrappers/Object}, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/ICounted cljs.core/ISeqable}, :factory :positional, :arglists (quote ([array shape dim-map index-maps source-position]))}, :protocols #{clojure.core.matrix.protocols/PDimensionInfo clojure.core.matrix.protocols/PIndexedSettingMutable cljs.core/IIndexed clojure.core.matrix.protocols/PSubVector clojure.core.matrix.protocols/PIndexedAccess clojure.core.matrix.protocols/PSliceView2 clojure.core.matrix.protocols/PIndexedSetting cljs.core/ICounted clojure.core.matrix.protocols/PImplementation cljs.core/ISeqable clojure.core.matrix.protocols/PZeroDimensionAccess clojure.core.matrix.impl.wrappers/Object}, :name clojure.core.matrix.impl.wrappers/->NDWrapper, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/wrappers.cljc", :end-column 19, :method-params ([array shape dim-map index-maps source-position]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 218, :end-line 218, :max-fixed-arity 5, :fn-var true, :arglists (quote ([array shape dim-map index-maps source-position])), :skip-protocol-flag #{cljs.core/IIndexed cljs.core/ICounted cljs.core/ISeqable}}, ->SliceWrapper {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/wrappers.cljc", :line 114, :column 10, :end-line 114, :end-column 22, :protocols #{clojure.core.matrix.protocols/PDimensionInfo clojure.core.matrix.protocols/PIndexedSettingMutable clojure.core.matrix.protocols/PIndexedAccess clojure.core.matrix.protocols/PIndexedSetting clojure.core.matrix.protocols/PImplementation cljs.core/ISeqable clojure.core.matrix.protocols/PConversion clojure.core.matrix.protocols/PMatrixCloning clojure.core.matrix.protocols/PZeroDimensionAccess clojure.core.matrix.impl.wrappers/Object}, :skip-protocol-flag #{cljs.core/ISeqable}, :factory :positional, :arglists (quote ([array slice]))}, :protocols #{clojure.core.matrix.protocols/PDimensionInfo clojure.core.matrix.protocols/PIndexedSettingMutable clojure.core.matrix.protocols/PIndexedAccess clojure.core.matrix.protocols/PIndexedSetting clojure.core.matrix.protocols/PImplementation cljs.core/ISeqable clojure.core.matrix.protocols/PConversion clojure.core.matrix.protocols/PMatrixCloning clojure.core.matrix.protocols/PZeroDimensionAccess clojure.core.matrix.impl.wrappers/Object}, :name clojure.core.matrix.impl.wrappers/->SliceWrapper, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/wrappers.cljc", :end-column 22, :method-params ([array slice]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 114, :end-line 114, :max-fixed-arity 2, :fn-var true, :arglists (quote ([array slice])), :skip-protocol-flag #{cljs.core/ISeqable}}, wrap-slice {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/wrappers.cljc", :line 360, :column 7, :end-line 360, :end-column 17, :arglists (quote ([m slice])), :doc "Creates a view of a major slice of an array."}, :name clojure.core.matrix.impl.wrappers/wrap-slice, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/wrappers.cljc", :end-column 17, :method-params ([m slice]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 360, :end-line 360, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m slice])), :doc "Creates a view of a major slice of an array."}, wrap-selection {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/wrappers.cljc", :line 379, :column 7, :end-line 379, :end-column 21, :arglists (quote ([m indices])), :doc "Wraps an array using a selection of indexes for each dimension."}, :name clojure.core.matrix.impl.wrappers/wrap-selection, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/wrappers.cljc", :end-column 21, :method-params ([m indices]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 379, :end-line 379, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m indices])), :doc "Wraps an array using a selection of indexes for each dimension."}, NDWrapper {:num-fields 5, :protocols #{clojure.core.matrix.protocols/PDimensionInfo clojure.core.matrix.protocols/PIndexedSettingMutable cljs.core/IIndexed clojure.core.matrix.protocols/PSubVector clojure.core.matrix.protocols/PIndexedAccess clojure.core.matrix.protocols/PSliceView2 clojure.core.matrix.protocols/PIndexedSetting cljs.core/ICounted clojure.core.matrix.protocols/PImplementation cljs.core/ISeqable clojure.core.matrix.protocols/PZeroDimensionAccess clojure.core.matrix.impl.wrappers/Object}, :name clojure.core.matrix.impl.wrappers/NDWrapper, :file "resources/public/js/clojure/core/matrix/impl/wrappers.cljc", :end-column 19, :type true, :column 10, :line 218, :record false, :end-line 218, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/ICounted cljs.core/ISeqable}}, wrap-nd {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/wrappers.cljc", :line 368, :column 7, :end-line 368, :end-column 14, :arglists (quote ([m])), :doc "Wraps an array in a NDWrapper view. Useful for taking submatrices, subviews etc."}, :name clojure.core.matrix.impl.wrappers/wrap-nd, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/wrappers.cljc", :end-column 14, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 368, :end-line 368, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Wraps an array in a NDWrapper view. Useful for taking submatrices, subviews etc."}, SliceWrapper {:num-fields 2, :protocols #{clojure.core.matrix.protocols/PDimensionInfo clojure.core.matrix.protocols/PIndexedSettingMutable clojure.core.matrix.protocols/PIndexedAccess clojure.core.matrix.protocols/PIndexedSetting clojure.core.matrix.protocols/PImplementation cljs.core/ISeqable clojure.core.matrix.protocols/PConversion clojure.core.matrix.protocols/PMatrixCloning clojure.core.matrix.protocols/PZeroDimensionAccess clojure.core.matrix.impl.wrappers/Object}, :name clojure.core.matrix.impl.wrappers/SliceWrapper, :file "resources/public/js/clojure/core/matrix/impl/wrappers.cljc", :end-column 22, :type true, :column 10, :line 114, :record false, :end-line 114, :skip-protocol-flag #{cljs.core/ISeqable}}, wrap-submatrix {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/wrappers.cljc", :line 391, :column 7, :end-line 391, :end-column 21, :arglists (quote ([m dim-ranges])), :doc "Wraps an array using a selection of [start length] ranges for each dimension."}, :name clojure.core.matrix.impl.wrappers/wrap-submatrix, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/wrappers.cljc", :end-column 21, :method-params ([m dim-ranges]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 391, :end-line 391, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m dim-ranges])), :doc "Wraps an array using a selection of [start length] ranges for each dimension."}, ScalarWrapper {:num-fields 1, :protocols #{clojure.core.matrix.protocols/PDimensionInfo clojure.core.matrix.protocols/PIndexedAccess clojure.core.matrix.protocols/PIndexedSetting clojure.core.matrix.protocols/PImplementation clojure.core.matrix.protocols/PConversion clojure.core.matrix.protocols/PMatrixCloning clojure.core.matrix.protocols/PZeroDimensionAccess clojure.core.matrix.impl.wrappers/Object}, :name clojure.core.matrix.impl.wrappers/ScalarWrapper, :file "resources/public/js/clojure/core/matrix/impl/wrappers.cljc", :end-column 23, :type true, :column 10, :line 37, :record false, :end-line 37, :skip-protocol-flag nil}, ->ScalarWrapper {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix/impl/wrappers.cljc", :line 37, :column 10, :end-line 37, :end-column 23, :protocols #{clojure.core.matrix.protocols/PDimensionInfo clojure.core.matrix.protocols/PIndexedAccess clojure.core.matrix.protocols/PIndexedSetting clojure.core.matrix.protocols/PImplementation clojure.core.matrix.protocols/PConversion clojure.core.matrix.protocols/PMatrixCloning clojure.core.matrix.protocols/PZeroDimensionAccess clojure.core.matrix.impl.wrappers/Object}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([value]))}, :protocols #{clojure.core.matrix.protocols/PDimensionInfo clojure.core.matrix.protocols/PIndexedAccess clojure.core.matrix.protocols/PIndexedSetting clojure.core.matrix.protocols/PImplementation clojure.core.matrix.protocols/PConversion clojure.core.matrix.protocols/PMatrixCloning clojure.core.matrix.protocols/PZeroDimensionAccess clojure.core.matrix.impl.wrappers/Object}, :name clojure.core.matrix.impl.wrappers/->ScalarWrapper, :variadic false, :file "resources/public/js/clojure/core/matrix/impl/wrappers.cljc", :end-column 23, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value])), :skip-protocol-flag nil}}, :require-macros {clojure.core.matrix.macros clojure.core.matrix.macros, clojure.core.matrix.macros-cljs clojure.core.matrix.macros-cljs, clojure.core.matrix.impl.wrappers clojure.core.matrix.impl.wrappers, clojure.core.matrix.impl.persistent-vector clojure.core.matrix.impl.persistent-vector}, :cljs.analyzer/constants {:seen #{:else long longs objects value :scalar-wrapper array index-maps :nd-wrapper source-position :tag :volatile-mutable :doc slice shape dim-map :slice-wrapper}, :order [:scalar-wrapper :doc value :volatile-mutable :slice-wrapper array slice :tag long :nd-wrapper shape longs dim-map index-maps objects source-position :else]}, :doc "Implementations for specialised wrapper types.\n\n   These wrapper types enable efficient of convenient implementation of various core.matrix protocols."}