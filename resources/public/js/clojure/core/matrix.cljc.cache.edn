;; Analyzed by ClojureScript 1.7.228
{:use-macros {def-mat-mop clojure.core.matrix, def-mat-mops clojure.core.matrix, TODO clojure.core.matrix.macros, error clojure.core.matrix.macros}, :excludes #{array array? clone}, :name clojure.core.matrix, :imports nil, :requires {clojure.core.matrix.impl.mathsops clojure.core.matrix.impl.mathsops, mp clojure.core.matrix.protocols, clojure.core.matrix.impl.wrappers clojure.core.matrix.impl.wrappers, u clojure.core.matrix.utils, wrap clojure.core.matrix.impl.wrappers, clojure.core.matrix.impl.sequence clojure.core.matrix.impl.sequence, clojure.core.matrix.implementations clojure.core.matrix.implementations, default clojure.core.matrix.impl.defaults, clojure.core.matrix.impl.defaults clojure.core.matrix.impl.defaults, clojure.core.matrix.utils clojure.core.matrix.utils, mops clojure.core.matrix.impl.mathsops, imp clojure.core.matrix.implementations, clojure.core.matrix.protocols clojure.core.matrix.protocols, clojure.core.matrix.impl.persistent-vector clojure.core.matrix.impl.persistent-vector}, :uses {*matrix-implementation* clojure.core.matrix.implementations}, :defs {sparse {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 332, :column 7, :end-line 332, :end-column 13, :arglists (quote ([data] [implementation data])), :doc "Coerces an array to a sparse format if possible. Sparse arrays are expected to\n   minimise space usage for zero elements.\n\n   Returns the array unchanged if such coercion is not possible, or if the array is already sparse.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([data] [implementation data]), :arglists ([data] [implementation data]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/sparse, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([data] [implementation data]), :arglists ([data] [implementation data]), :arglists-meta (nil nil)}, :method-params ([data] [implementation data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 332, :end-line 332, :max-fixed-arity 2, :fn-var true, :arglists ([data] [implementation data]), :doc "Coerces an array to a sparse format if possible. Sparse arrays are expected to\n   minimise space usage for zero elements.\n\n   Returns the array unchanged if such coercion is not possible, or if the array is already sparse."}, sqrt! {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the sqrt function on all elements of an array, using double precision values. Mutates the array in-place.", :file nil}, :name clojure.core.matrix/sqrt!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the sqrt function on all elements of an array, using double precision values. Mutates the array in-place."}, mset {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 761, :column 7, :end-line 761, :end-column 11, :arglists (quote ([m v] [m x v] [m x y v] [m x y z & more])), :doc "Sets a scalar value in an array at the specified position. Supports any number of dimensions.\n\n   Returns a new matrix and leaves the original unchanged.\n\n   WARNING: performance of this operation may be as high as O(N) where N is the number of elements in\n   the array. Consider using mutable arrays and `mset!` when setting large numbers of individual elements\n   is required.", :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([m v] [m x v] [m x y v]), :arglists ([m v] [m x v] [m x y v] [m x y z & more]), :arglists-meta (nil nil nil nil)}}, :name clojure.core.matrix/mset, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([m v] [m x v] [m x y v]), :arglists ([m v] [m x v] [m x y v] [m x y z & more]), :arglists-meta (nil nil nil nil)}, :method-params ([m v] [m x v] [m x y v]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 761, :end-line 761, :max-fixed-arity 4, :fn-var true, :arglists ([m v] [m x v] [m x y v] [m x y z & more]), :doc "Sets a scalar value in an array at the specified position. Supports any number of dimensions.\n\n   Returns a new matrix and leaves the original unchanged.\n\n   WARNING: performance of this operation may be as high as O(N) where N is the number of elements in\n   the array. Consider using mutable arrays and `mset!` when setting large numbers of individual elements\n   is required."}, relu! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1914, :column 7, :end-line 1914, :end-column 12, :arglists (quote ([a])), :doc "Computes the ReLU (rectified linear) function for every element of an array. Mutates the array."}, :name clojure.core.matrix/relu!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 12, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1914, :end-line 1914, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "Computes the ReLU (rectified linear) function for every element of an array. Mutates the array."}, dot {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1722, :column 7, :end-line 1722, :end-column 10, :arglists (quote ([a b])), :doc "Efficiently computes the scalar dot product (1Dx1D inner product) of two numerical vectors. Prefer this API\n   function if you are performing a dot product on 1D vectors and want a scalar result.\n\n   If either argument is not a vector, will compute a higher dimensional inner product."}, :name clojure.core.matrix/dot, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 10, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1722, :end-line 1722, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "Efficiently computes the scalar dot product (1Dx1D inner product) of two numerical vectors. Prefer this API\n   function if you are performing a dot product on 1D vectors and want a scalar result.\n\n   If either argument is not a vector, will compute a higher dimensional inner product."}, ne {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1325, :column 7, :end-line 1325, :end-column 9, :arglists (quote ([m a])), :doc "Element-wise not-equal comparison operation. Returns a binary array where\n  elements not-equal to the argument are represented by 1 and elements equal to\n  the argument are 0.\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (ne 1 1) ;=> 0\n  (ne 5 1) ;=> 1\n  (ne [[1 5] [3 6]] 3) ;=> [[1 1] [0 1]]\n  (ne [[1 5] [4 6]] [[2 3] [5 6]]) ;=> [[1 1] [1 0]]"}, :name clojure.core.matrix/ne, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 9, :method-params ([m a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1325, :end-line 1325, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m a])), :doc "Element-wise not-equal comparison operation. Returns a binary array where\n  elements not-equal to the argument are represented by 1 and elements equal to\n  the argument are 0.\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (ne 1 1) ;=> 0\n  (ne 5 1) ;=> 1\n  (ne [[1 5] [3 6]] 3) ;=> [[1 1] [0 1]]\n  (ne [[1 5] [4 6]] [[2 3] [5 6]]) ;=> [[1 1] [1 0]]"}, index-seq {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 2100, :column 7, :end-line 2100, :end-column 16, :arglists (quote ([m])), :doc "Returns a sequence of all possible index vectors into a matrix, in row-major order"}, :name clojure.core.matrix/index-seq, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 16, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2100, :end-line 2100, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns a sequence of all possible index vectors into a matrix, in row-major order"}, dense {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 343, :column 7, :end-line 343, :end-column 12, :arglists (quote ([data] [implementation data])), :doc "Coerces an array to a dense format if possible. Dense arrays are expected to\n   allocate contiguous storage space for all elements. Either row-major or column-major\n   storage may be alloacted, depending on the implementation.\n\n   'dense' should not be used with very large arrays, and may throw an OutOfMemoryError\n    if the dense array is too large to fit in available memory.\n\n   Returns the array unchanged if such coercion is not possible, or if the array is already dense.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([data] [implementation data]), :arglists ([data] [implementation data]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/dense, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([data] [implementation data]), :arglists ([data] [implementation data]), :arglists-meta (nil nil)}, :method-params ([data] [implementation data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 343, :end-line 343, :max-fixed-arity 2, :fn-var true, :arglists ([data] [implementation data]), :doc "Coerces an array to a dense format if possible. Dense arrays are expected to\n   allocate contiguous storage space for all elements. Either row-major or column-major\n   storage may be alloacted, depending on the implementation.\n\n   'dense' should not be used with very large arrays, and may throw an OutOfMemoryError\n    if the dense array is too large to fit in available memory.\n\n   Returns the array unchanged if such coercion is not possible, or if the array is already dense."}, index-seq-for-shape {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 2095, :column 7, :end-line 2095, :end-column 26, :arglists (quote ([sh])), :doc "Returns a sequence of all possible index vectors for a given shape, in row-major order"}, :name clojure.core.matrix/index-seq-for-shape, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 26, :method-params ([sh]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2095, :end-line 2095, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sh])), :doc "Returns a sequence of all possible index vectors for a given shape, in row-major order"}, negate! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1808, :column 7, :end-line 1808, :end-column 14, :arglists (quote ([m])), :doc "Calculates the negation of a numerical array in place. Generally equivalent to (scale! m -1.0)"}, :name clojure.core.matrix/negate!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 14, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1808, :end-line 1808, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Calculates the negation of a numerical array in place. Generally equivalent to (scale! m -1.0)"}, numerical? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 679, :column 7, :end-line 679, :end-column 17, :arglists (quote ([m])), :doc "Returns true if the matrix is a valid numerical matrix (i.e. supports numerical core.matrix operations)."}, :name clojure.core.matrix/numerical?, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 17, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 679, :end-line 679, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns true if the matrix is a valid numerical matrix (i.e. supports numerical core.matrix operations)."}, column-matrix? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 603, :column 7, :end-line 603, :end-column 21, :arglists (quote ([m])), :doc "Returns true if a matrix is a column-matrix (i.e. is 2D and has has exactly one column)"}, :name clojure.core.matrix/column-matrix?, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 21, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 603, :end-line 603, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns true if a matrix is a column-matrix (i.e. is 2D and has has exactly one column)"}, distance {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1780, :column 7, :end-line 1780, :end-column 15, :arglists (quote ([a b])), :doc "Calculates the euclidean distance between two numerical vectors.\n\n   This is equivalent to (norm 2 (sub a b)) but may be optimised by the underlying implementation."}, :name clojure.core.matrix/distance, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 15, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1780, :end-line 1780, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "Calculates the euclidean distance between two numerical vectors.\n\n   This is equivalent to (norm 2 (sub a b)) but may be optimised by the underlying implementation."}, mutable {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 255, :column 7, :end-line 255, :end-column 14, :arglists (quote ([data] [implementation data])), :doc "Constructs a fully mutable copy of the given array data.\n\n   If the implementation does not support mutable matrices, will return a mutable array\n   from another core.matrix implementation that supports either the same element type or a broader type.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([data] [implementation data]), :arglists ([data] [implementation data]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/mutable, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([data] [implementation data]), :arglists ([data] [implementation data]), :arglists-meta (nil nil)}, :method-params ([data] [implementation data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 255, :end-line 255, :max-fixed-arity 2, :fn-var true, :arglists ([data] [implementation data]), :doc "Constructs a fully mutable copy of the given array data.\n\n   If the implementation does not support mutable matrices, will return a mutable array\n   from another core.matrix implementation that supports either the same element type or a broader type."}, diagonal? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 508, :column 7, :end-line 508, :end-column 16, :arglists (quote ([m])), :doc "Returns true if the parameter is a diagonal matrix."}, :name clojure.core.matrix/diagonal?, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 16, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 508, :end-line 508, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns true if the parameter is a diagonal matrix."}, add-inner-product! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1616, :column 7, :end-line 1616, :end-column 25, :arglists (quote ([m a b] [m a b factor])), :doc "Adds the inner product of two numerical arrays to the first array.\n   Returns the mutated array.\n   This is equivalent to (add! m (inner-product a b)) but may be optimised by the underlying implementation.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([m a b] [m a b factor]), :arglists ([m a b] [m a b factor]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/add-inner-product!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([m a b] [m a b factor]), :arglists ([m a b] [m a b factor]), :arglists-meta (nil nil)}, :method-params ([m a b] [m a b factor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1616, :end-line 1616, :max-fixed-arity 4, :fn-var true, :arglists ([m a b] [m a b factor]), :doc "Adds the inner product of two numerical arrays to the first array.\n   Returns the mutated array.\n   This is equivalent to (add! m (inner-product a b)) but may be optimised by the underlying implementation."}, identity-matrix? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 492, :column 7, :end-line 492, :end-column 23, :arglists (quote ([m])), :doc "Returns true if the parameter is an identity-matrix, i.e. a symmetric square matrix with element values\n   of 1 on the leading diagonal and 0 elsewhere."}, :name clojure.core.matrix/identity-matrix?, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 23, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 492, :end-line 492, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns true if the parameter is an identity-matrix, i.e. a symmetric square matrix with element values\n   of 1 on the leading diagonal and 0 elsewhere."}, to-radians {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the to-radians function on all elements of an array, using double precision values. Returns a new array.", :file nil}, :name clojure.core.matrix/to-radians, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the to-radians function on all elements of an array, using double precision values. Returns a new array."}, emap-indexed {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 2024, :column 7, :end-line 2024, :end-column 19, :arglists (quote ([f m] [f m a] [f m a & more])), :doc "Element-wise map-indexed over all elements of one or more arrays.\n\n   f must accept as first argument the index vector of the current element,\n   and return a result compatible with the element-type of the array m\n\n   Returns a new array of the same element-type and shape as the array m.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([f m] [f m a]), :arglists ([f m] [f m a] [f m a & more]), :arglists-meta (nil nil nil)}}, :name clojure.core.matrix/emap-indexed, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([f m] [f m a]), :arglists ([f m] [f m a] [f m a & more]), :arglists-meta (nil nil nil)}, :method-params ([f m] [f m a]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 2024, :end-line 2024, :max-fixed-arity 3, :fn-var true, :arglists ([f m] [f m a] [f m a & more]), :doc "Element-wise map-indexed over all elements of one or more arrays.\n\n   f must accept as first argument the index vector of the current element,\n   and return a result compatible with the element-type of the array m\n\n   Returns a new array of the same element-type and shape as the array m."}, density {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 633, :column 7, :end-line 633, :end-column 14, :arglists (quote ([m])), :doc "Returns the density of the matrix, defined as the proportion of non-zero elements"}, :name clojure.core.matrix/density, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 14, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 633, :end-line 633, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns the density of the matrix, defined as the proportion of non-zero elements"}, new-scalar-array {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 194, :column 7, :end-line 194, :end-column 23, :arglists (quote ([] [implementation])), :doc "Returns a new mutable scalar array containing the scalar value zero.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [implementation]), :arglists ([] [implementation]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/new-scalar-array, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [implementation]), :arglists ([] [implementation]), :arglists-meta (nil nil)}, :method-params ([] [implementation]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 194, :end-line 194, :max-fixed-arity 1, :fn-var true, :arglists ([] [implementation]), :doc "Returns a new mutable scalar array containing the scalar value zero."}, lt {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1249, :column 7, :end-line 1249, :end-column 9, :arglists (quote ([m a] [m a & more])), :doc "Element-wise less-than comparison operation. Returns a binary array where\n  elements less-than the argument are represented by 1 and elements greater-\n  than or equal to the argument are 0.\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (lt 1 4) ;=> 1\n  (lt 3 3) ;=> 0\n  (lt [[1 5] [3 6]] 3) ;=> [[1 0] [0 0]]\n  (lt [[1 5] [4 6]] [[2 3] [5 6]]) ;=> [[1 0] [1 0]]", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([m a]), :arglists ([m a] [m a & more]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/lt, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 9, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([m a]), :arglists ([m a] [m a & more]), :arglists-meta (nil nil)}, :method-params ([m a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1249, :end-line 1249, :max-fixed-arity 2, :fn-var true, :arglists ([m a] [m a & more]), :doc "Element-wise less-than comparison operation. Returns a binary array where\n  elements less-than the argument are represented by 1 and elements greater-\n  than or equal to the argument are 0.\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (lt 1 4) ;=> 1\n  (lt 3 3) ;=> 0\n  (lt [[1 5] [3 6]] 3) ;=> [[1 0] [0 0]]\n  (lt [[1 5] [4 6]] [[2 3] [5 6]]) ;=> [[1 0] [1 0]]"}, emax {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 2053, :column 7, :end-line 2053, :end-column 11, :arglists (quote ([m])), :doc "Gets the maximum element value from a numerical array"}, :name clojure.core.matrix/emax, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 11, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2053, :end-line 2053, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Gets the maximum element value from a numerical array"}, slice-view {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 980, :column 7, :end-line 980, :end-column 17, :arglists (quote ([m i] [m dimension i])), :doc "Gets a view of an array slice. Guaranteed to return a mutable view if the array is mutable.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([m i] [m dimension i]), :arglists ([m i] [m dimension i]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/slice-view, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([m i] [m dimension i]), :arglists ([m i] [m dimension i]), :arglists-meta (nil nil)}, :method-params ([m i] [m dimension i]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 980, :end-line 980, :max-fixed-arity 3, :fn-var true, :arglists ([m i] [m dimension i]), :doc "Gets a view of an array slice. Guaranteed to return a mutable view if the array is mutable."}, orthogonal? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 523, :column 7, :end-line 523, :end-column 18, :arglists (quote ([m eps] [m])), :doc "Returns true if the parameter is an orthogonal matrix.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([m eps] [m]), :arglists ([m eps] [m]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/orthogonal?, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([m eps] [m]), :arglists ([m eps] [m]), :arglists-meta (nil nil)}, :method-params ([m eps] [m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 523, :end-line 523, :max-fixed-arity 2, :fn-var true, :arglists ([m eps] [m]), :doc "Returns true if the parameter is an orthogonal matrix."}, le {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1268, :column 7, :end-line 1268, :end-column 9, :arglists (quote ([m a] [m a & more])), :doc "Element-wise less-than-or-equal-to comparison operation. Returns a binary\n  array where elements less-than or equal to the argument are represented by 1\n  and elements greater-than to the argument are 0.\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (le 3 3) ;=> 1\n  (le 4 3) ;=> 0\n  (le [[1 5] [3 6]] 3) ;=> [[1 0] [1 0]]\n  (le [[1 5] [4 6]] [[2 3] [5 6]]) ;=> [[1 0] [1 1]]", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([m a]), :arglists ([m a] [m a & more]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/le, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 9, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([m a]), :arglists ([m a] [m a & more]), :arglists-meta (nil nil)}, :method-params ([m a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1268, :end-line 1268, :max-fixed-arity 2, :fn-var true, :arglists ([m a] [m a & more]), :doc "Element-wise less-than-or-equal-to comparison operation. Returns a binary\n  array where elements less-than or equal to the argument are represented by 1\n  and elements greater-than to the argument are 0.\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (le 3 3) ;=> 1\n  (le 4 3) ;=> 0\n  (le [[1 5] [3 6]] 3) ;=> [[1 0] [1 0]]\n  (le [[1 5] [4 6]] [[2 3] [5 6]]) ;=> [[1 0] [1 1]]"}, add {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1519, :column 7, :end-line 1519, :end-column 10, :arglists (quote ([] [a] [a b] [a b & more])), :doc "Performs element-wise addition on one or more numerical arrays.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [a] [a b]), :arglists ([] [a] [a b] [a b & more]), :arglists-meta (nil nil nil nil)}}, :name clojure.core.matrix/add, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [a] [a b]), :arglists ([] [a] [a b] [a b & more]), :arglists-meta (nil nil nil nil)}, :method-params ([] [a] [a b]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 1519, :end-line 1519, :max-fixed-arity 2, :fn-var true, :arglists ([] [a] [a b] [a b & more]), :doc "Performs element-wise addition on one or more numerical arrays."}, negate {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1803, :column 7, :end-line 1803, :end-column 13, :arglists (quote ([m])), :doc "Calculates the negation of a numerical array. Generally equivalent to (scale m -1.0)"}, :name clojure.core.matrix/negate, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 13, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1803, :end-line 1803, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Calculates the negation of a numerical array. Generally equivalent to (scale m -1.0)"}, asin! {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the asin function on all elements of an array, using double precision values. Mutates the array in-place.", :file nil}, :name clojure.core.matrix/asin!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the asin function on all elements of an array, using double precision values. Mutates the array in-place."}, get-column {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 814, :column 7, :end-line 814, :end-column 17, :arglists (quote ([m y])), :doc "Gets a column of a matrix, as a 1D vector.\n\n   May return a mutable view if supported by the implementation."}, :name clojure.core.matrix/get-column, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 17, :method-params ([m y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 814, :end-line 814, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m y])), :doc "Gets a column of a matrix, as a 1D vector.\n\n   May return a mutable view if supported by the implementation."}, cos! {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the cos function on all elements of an array, using double precision values. Mutates the array in-place.", :file nil}, :name clojure.core.matrix/cos!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the cos function on all elements of an array, using double precision values. Mutates the array in-place."}, e= {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1354, :column 7, :end-line 1354, :end-column 9, :arglists (quote ([m1] [m1 m2] [m1 m2 & more])), :doc "Returns true if all corresponding array elements are equal (using the semantics of clojure.core/=).\n\n   WARNING: a java.lang.Long does not equal a java.lang.Double.\n   Use 'equals' or 'e==' instead if you want to test for numerical equality.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([m1] [m1 m2]), :arglists ([m1] [m1 m2] [m1 m2 & more]), :arglists-meta (nil nil nil)}}, :name clojure.core.matrix/e=, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 9, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([m1] [m1 m2]), :arglists ([m1] [m1 m2] [m1 m2 & more]), :arglists-meta (nil nil nil)}, :method-params ([m1] [m1 m2]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1354, :end-line 1354, :max-fixed-arity 2, :fn-var true, :arglists ([m1] [m1 m2] [m1 m2 & more]), :doc "Returns true if all corresponding array elements are equal (using the semantics of clojure.core/=).\n\n   WARNING: a java.lang.Long does not equal a java.lang.Double.\n   Use 'equals' or 'e==' instead if you want to test for numerical equality."}, sparse-matrix {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 319, :column 7, :end-line 319, :end-column 20, :arglists (quote ([data] [implementation data])), :doc "Creates a sparse matrix with the given data, using a specified implementation\n  or the current implementation if not specified. Sparse matrices are required to store\n  a M*N matrix with E non-zero elements in approx O(M+N+E) space or less.\n\n  Throws an exception if creation of a sparse matrix is not possible.\n\n  `sparse-matrix` wqorks as a synonym for `sparse-array`.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([data] [implementation data]), :arglists ([data] [implementation data]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/sparse-matrix, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([data] [implementation data]), :arglists ([data] [implementation data]), :arglists-meta (nil nil)}, :method-params ([data] [implementation data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 319, :end-line 319, :max-fixed-arity 2, :fn-var true, :arglists ([data] [implementation data]), :doc "Creates a sparse matrix with the given data, using a specified implementation\n  or the current implementation if not specified. Sparse matrices are required to store\n  a M*N matrix with E non-zero elements in approx O(M+N+E) space or less.\n\n  Throws an exception if creation of a sparse matrix is not possible.\n\n  `sparse-matrix` wqorks as a synonym for `sparse-array`."}, normalise-arg {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 838, :column 8, :end-line 838, :end-column 21, :private true, :arglists (quote ([arg dim-count])), :doc "Normalises arg to either a number of a sequable list of indexes"}, :private true, :name clojure.core.matrix/normalise-arg, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 21, :method-params ([arg dim-count]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 838, :end-line 838, :max-fixed-arity 2, :fn-var true, :arglists (quote ([arg dim-count])), :doc "Normalises arg to either a number of a sequable list of indexes"}, ceil! {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the ceil function on all elements of an array, using double precision values. Mutates the array in-place.", :file nil}, :name clojure.core.matrix/ceil!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the ceil function on all elements of an array, using double precision values. Mutates the array in-place."}, log {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the log function on all elements of an array, using double precision values. Returns a new array.", :file nil}, :name clojure.core.matrix/log, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the log function on all elements of an array, using double precision values. Returns a new array."}, clamp {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 2058, :column 7, :end-line 2058, :end-column 12, :arglists (quote ([m a b])), :doc "Clamps each element in a numerical array between lower and upper bounds\n  specified by a and b, respectively.\n\n  Examples:\n  (clamp [[1 5 1] [4 10 2] [5 6 3]] 2 8) ;=> [[2 5 2] [4 8 2] [5 6 3]]\n  "}, :name clojure.core.matrix/clamp, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 12, :method-params ([m a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2058, :end-line 2058, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m a b])), :doc "Clamps each element in a numerical array between lower and upper bounds\n  specified by a and b, respectively.\n\n  Examples:\n  (clamp [[1 5 1] [4 10 2] [5 6 3]] 2 8) ;=> [[2 5 2] [4 8 2] [5 6 3]]\n  "}, current-implementation-object {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 2147, :column 7, :end-line 2147, :end-column 36, :arglists (quote ([])), :doc "Gets a canonical object for the currently active matrix implementation. This object\n   can be used to pass as an implementation parameter, or to query implementation internals via core.matrix protocols."}, :name clojure.core.matrix/current-implementation-object, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 36, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2147, :end-line 2147, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Gets a canonical object for the currently active matrix implementation. This object\n   can be used to pass as an implementation parameter, or to query implementation internals via core.matrix protocols."}, acos {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the acos function on all elements of an array, using double precision values. Returns a new array.", :file nil}, :name clojure.core.matrix/acos, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the acos function on all elements of an array, using double precision values. Returns a new array."}, to-degrees {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the to-degrees function on all elements of an array, using double precision values. Returns a new array.", :file nil}, :name clojure.core.matrix/to-degrees, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the to-degrees function on all elements of an array, using double precision values. Returns a new array."}, pack {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 718, :column 7, :end-line 718, :end-column 11, :arglists (quote ([a])), :doc "Packs array data in the most efficient format as defined by the implementation. May return the\n   same array if no additional packing is required."}, :name clojure.core.matrix/pack, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 11, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 718, :end-line 718, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "Packs array data in the most efficient format as defined by the implementation. May return the\n   same array if no additional packing is required."}, floor {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the floor function on all elements of an array, using double precision values. Returns a new array.", :file nil}, :name clojure.core.matrix/floor, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the floor function on all elements of an array, using double precision values. Returns a new array."}, as-vector {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1106, :column 7, :end-line 1106, :end-column 16, :arglists (quote ([m])), :doc "Creates a view of an array as a single flattened vector.\n\n   Returns nil if this is not supported by the implementation. You should use `to-vector` instead to\n   obtain a flattened vector without guaranteeing a view."}, :name clojure.core.matrix/as-vector, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 16, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1106, :end-line 1106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Creates a view of an array as a single flattened vector.\n\n   Returns nil if this is not supported by the implementation. You should use `to-vector` instead to\n   obtain a flattened vector without guaranteeing a view."}, cross {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1762, :column 7, :end-line 1762, :end-column 12, :arglists (quote ([a b])), :doc "Computes the 3D cross-product of two numerical vectors.\n\n   Behavior on other types is undefined."}, :name clojure.core.matrix/cross, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 12, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1762, :end-line 1762, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "Computes the 3D cross-product of two numerical vectors.\n\n   Behavior on other types is undefined."}, identity-matrix {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 227, :column 7, :end-line 227, :end-column 22, :arglists (quote ([dims] [implementation dims])), :doc "Constructs a 2D identity matrix with the given number of rows.\n\n   Identity matrices constructed with this function may not be fully mutable because they may be\n   implemented with a specialised identity matrix type. Use (mutable (identity-matrix ...)) if you\n   need to guarantee a mutable matrix.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([dims] [implementation dims]), :arglists ([dims] [implementation dims]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/identity-matrix, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([dims] [implementation dims]), :arglists ([dims] [implementation dims]), :arglists-meta (nil nil)}, :method-params ([dims] [implementation dims]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 227, :end-line 227, :max-fixed-arity 2, :fn-var true, :arglists ([dims] [implementation dims]), :doc "Constructs a 2D identity matrix with the given number of rows.\n\n   Identity matrices constructed with this function may not be fully mutable because they may be\n   implemented with a specialised identity matrix type. Use (mutable (identity-matrix ...)) if you\n   need to guarantee a mutable matrix."}, set-indices {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 910, :column 7, :end-line 910, :end-column 18, :arglists (quote ([a indices values])), :doc "like select-indices but sets the elements at the specified indices to values.\n   Leaves the original array (a) unchanged and returns a modified array"}, :name clojure.core.matrix/set-indices, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 18, :method-params ([a indices values]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 910, :end-line 910, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a indices values])), :doc "like select-indices but sets the elements at the specified indices to values.\n   Leaves the original array (a) unchanged and returns a modified array"}, pow! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1853, :column 7, :end-line 1853, :end-column 11, :arglists (quote ([m a])), :doc "Mutable exponent function, see 'pow'"}, :name clojure.core.matrix/pow!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 11, :method-params ([m a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1853, :end-line 1853, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m a])), :doc "Mutable exponent function, see 'pow'"}, index? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 648, :column 7, :end-line 648, :end-column 13, :arglists (quote ([m])), :doc "Returns true if the parameter is a valid array index type. An index is a seq-able 1D list\n   of integer values that can be used to index into arrays."}, :name clojure.core.matrix/index?, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 13, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 648, :end-line 648, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns true if the parameter is a valid array index type. An index is a seq-able 1D list\n   of integer values that can be used to index into arrays."}, tanh {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the tanh function on all elements of an array, using double precision values. Returns a new array.", :file nil}, :name clojure.core.matrix/tanh, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the tanh function on all elements of an array, using double precision values. Returns a new array."}, join {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1028, :column 7, :end-line 1028, :end-column 11, :arglists (quote ([& arrays])), :doc "Joins arrays together, along the major dimension 0. For 1D vectors, this behaves as simple concatenation.\n   Other dimensions must be compatible. To join arrays along a different dimension, use 'join-along' instead.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(arrays)], :arglists ([& arrays]), :arglists-meta (nil)}}, :name clojure.core.matrix/join, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(arrays)], :arglists ([& arrays]), :arglists-meta (nil)}, :method-params [(arrays)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1028, :end-line 1028, :max-fixed-arity 0, :fn-var true, :arglists ([& arrays]), :doc "Joins arrays together, along the major dimension 0. For 1D vectors, this behaves as simple concatenation.\n   Other dimensions must be compatible. To join arrays along a different dimension, use 'join-along' instead."}, add-scaled-product {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1601, :column 7, :end-line 1601, :end-column 25, :arglists (quote ([m a b factor])), :doc "Adds the product of two numerical arrays scaled by a given factor to the first array.\n\n   This is equivalent to (add m (mul a b factor)) but may be optimised by the underlying implementation."}, :name clojure.core.matrix/add-scaled-product, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 25, :method-params ([m a b factor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1601, :end-line 1601, :max-fixed-arity 4, :fn-var true, :arglists (quote ([m a b factor])), :doc "Adds the product of two numerical arrays scaled by a given factor to the first array.\n\n   This is equivalent to (add m (mul a b factor)) but may be optimised by the underlying implementation."}, dimension-count {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 552, :column 7, :end-line 552, :end-column 22, :arglists (quote ([m dim])), :doc "Returns the size of the specified dimension in a matrix. Will throw an error if the matrix\n   does not have the specified dimension.", :inline (fn ([m dim] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote cljs.core/long)) (clojure.core/list (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote mp/dimension-count)) (clojure.core/list m) (clojure.core/list dim))))))))))}, :name clojure.core.matrix/dimension-count, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 22, :method-params ([m dim]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 552, :end-line 552, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m dim])), :doc "Returns the size of the specified dimension in a matrix. Will throw an error if the matrix\n   does not have the specified dimension.", :inline (fn ([m dim] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote cljs.core/long)) (clojure.core/list (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote mp/dimension-count)) (clojure.core/list m) (clojure.core/list dim))))))))))}, atan! {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the atan function on all elements of an array, using double precision values. Mutates the array in-place.", :file nil}, :name clojure.core.matrix/atan!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the atan function on all elements of an array, using double precision values. Mutates the array in-place."}, set-row {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1953, :column 7, :end-line 1953, :end-column 14, :arglists (quote ([m i row])), :doc "Sets a row in a matrix using a specified vector."}, :name clojure.core.matrix/set-row, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 14, :method-params ([m i row]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1953, :end-line 1953, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m i row])), :doc "Sets a row in a matrix using a specified vector."}, sub! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1661, :column 7, :end-line 1661, :end-column 11, :arglists (quote ([a] [a b] [a b & more])), :doc "Performs element-wise mutable subtraction on one or more numerical arrays.\n\n   NOTE: For a single argument, returns the argument unchanged: use negate! instead if you wish to negate a mutable\n   array in place. This is intentional, so that you can do (apply sub! m list-of-arrays) and get the expected\n   result if the list of arrays is empty.\n\n   Returns the first array, after it has been mutated.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([a] [a b]), :arglists ([a] [a b] [a b & more]), :arglists-meta (nil nil nil)}}, :name clojure.core.matrix/sub!, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([a] [a b]), :arglists ([a] [a b] [a b & more]), :arglists-meta (nil nil nil)}, :method-params ([a] [a b]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1661, :end-line 1661, :max-fixed-arity 2, :fn-var true, :arglists ([a] [a b] [a b & more]), :doc "Performs element-wise mutable subtraction on one or more numerical arrays.\n\n   NOTE: For a single argument, returns the argument unchanged: use negate! instead if you wish to negate a mutable\n   array in place. This is intentional, so that you can do (apply sub! m list-of-arrays) and get the expected\n   result if the list of arrays is empty.\n\n   Returns the first array, after it has been mutated."}, select {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 855, :column 7, :end-line 855, :end-column 13, :arglists (quote ([a & args])), :doc "Returns an array containing all elements in a which are at the positions\n   of the Cartesian product of args. An argument can be:\n    - a number - slices at this dimension (eliminates the dimension),\n    - a keyword which selects specific slices (:first :last)\n    - a 1-dimensional array of numbers which selects the slices at these indices\n    - a keyword which selects a range of slices (:all :butlast :rest)\n\n   The number of args must match the dimensionality of a.\n\n   Examples:\n   (select [[1 2][3 4]] 0 0) ;=> 1\n   (select [[1 2][3 4]] 0 :all) ;=> [1 2]\n   (select [[1 2][3 4]] [0 1] [0]) ;=> [[1] [3]]\n   (select [[1 2][3 4]] :all 0) ;=> [1 3]", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(a args)], :arglists ([a & args]), :arglists-meta (nil)}}, :name clojure.core.matrix/select, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(a args)], :arglists ([a & args]), :arglists-meta (nil)}, :method-params [(a args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 855, :end-line 855, :max-fixed-arity 1, :fn-var true, :arglists ([a & args]), :doc "Returns an array containing all elements in a which are at the positions\n   of the Cartesian product of args. An argument can be:\n    - a number - slices at this dimension (eliminates the dimension),\n    - a keyword which selects specific slices (:first :last)\n    - a 1-dimensional array of numbers which selects the slices at these indices\n    - a keyword which selects a range of slices (:all :butlast :rest)\n\n   The number of args must match the dimensionality of a.\n\n   Examples:\n   (select [[1 2][3 4]] 0 0) ;=> 1\n   (select [[1 2][3 4]] 0 :all) ;=> [1 2]\n   (select [[1 2][3 4]] [0 1] [0]) ;=> [[1] [3]]\n   (select [[1 2][3 4]] :all 0) ;=> [1 3]"}, add-scaled! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1595, :column 7, :end-line 1595, :end-column 18, :arglists (quote ([m a factor])), :doc "Adds a numerical array scaled by a given factor to the first array. Returns the mutated array."}, :name clojure.core.matrix/add-scaled!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 18, :method-params ([m a factor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1595, :end-line 1595, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m a factor])), :doc "Adds a numerical array scaled by a given factor to the first array. Returns the mutated array."}, new-matrix {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 153, :column 7, :end-line 153, :end-column 17, :arglists (quote ([rows columns] [implementation rows columns])), :doc "Constructs a new 2D array (matrix) with the given dimensions.\n   The new matrix will contain default values as defined by the implementation (usually null or zero).\n   If the implementation supports mutable matrices, then the new matrix will be fully mutable.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([rows columns] [implementation rows columns]), :arglists ([rows columns] [implementation rows columns]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/new-matrix, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([rows columns] [implementation rows columns]), :arglists ([rows columns] [implementation rows columns]), :arglists-meta (nil nil)}, :method-params ([rows columns] [implementation rows columns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 3, :fn-var true, :arglists ([rows columns] [implementation rows columns]), :doc "Constructs a new 2D array (matrix) with the given dimensions.\n   The new matrix will contain default values as defined by the implementation (usually null or zero).\n   If the implementation supports mutable matrices, then the new matrix will be fully mutable."}, shift {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1085, :column 7, :end-line 1085, :end-column 12, :arglists (quote ([m dimension shift-amount] [m shifts])), :doc "Shifts all elements of an array along specified dimensions, maintaining the shape of the array.\n\n   New spaces shifted into the array are filled with zero.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([m dimension shift-amount] [m shifts]), :arglists ([m dimension shift-amount] [m shifts]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/shift, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([m dimension shift-amount] [m shifts]), :arglists ([m dimension shift-amount] [m shifts]), :arglists-meta (nil nil)}, :method-params ([m dimension shift-amount] [m shifts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1085, :end-line 1085, :max-fixed-arity 3, :fn-var true, :arglists ([m dimension shift-amount] [m shifts]), :doc "Shifts all elements of an array along specified dimensions, maintaining the shape of the array.\n\n   New spaces shifted into the array are filled with zero."}, to-radians! {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the to-radians function on all elements of an array, using double precision values. Mutates the array in-place.", :file nil}, :name clojure.core.matrix/to-radians!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the to-radians function on all elements of an array, using double precision values. Mutates the array in-place."}, softplus {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1898, :column 7, :end-line 1898, :end-column 15, :arglists (quote ([a])), :doc "Computes the softplus function for every element of an array."}, :name clojure.core.matrix/softplus, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 15, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1898, :end-line 1898, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "Computes the softplus function for every element of an array."}, ceil {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the ceil function on all elements of an array, using double precision values. Returns a new array.", :file nil}, :name clojure.core.matrix/ceil, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the ceil function on all elements of an array, using double precision values. Returns a new array."}, to-vector {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1114, :column 7, :end-line 1114, :end-column 16, :arglists (quote ([m])), :doc "Creates a new array representing the elements of array m as a single flattened vector.\n\n   This operation guarantees a new copy of the data."}, :name clojure.core.matrix/to-vector, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 16, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1114, :end-line 1114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Creates a new array representing the elements of array m as a single flattened vector.\n\n   This operation guarantees a new copy of the data."}, emap! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 2068, :column 7, :end-line 2068, :end-column 12, :arglists (quote ([f m] [f m a] [f m a & more])), :doc "Element-wise map of a function f over all elements of one or more arrays.\n\n   f must return a result compatible with the element-type of the array m\n\n   Performs in-place modification of the first array argument.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([f m] [f m a]), :arglists ([f m] [f m a] [f m a & more]), :arglists-meta (nil nil nil)}}, :name clojure.core.matrix/emap!, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([f m] [f m a]), :arglists ([f m] [f m a] [f m a & more]), :arglists-meta (nil nil nil)}, :method-params ([f m] [f m a]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 2068, :end-line 2068, :max-fixed-arity 3, :fn-var true, :arglists ([f m] [f m a] [f m a & more]), :doc "Element-wise map of a function f over all elements of one or more arrays.\n\n   f must return a result compatible with the element-type of the array m\n\n   Performs in-place modification of the first array argument."}, abs! {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the abs function on all elements of an array, using double precision values. Mutates the array in-place.", :file nil}, :name clojure.core.matrix/abs!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the abs function on all elements of an array, using double precision values. Mutates the array in-place."}, labels {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1388, :column 7, :end-line 1388, :end-column 13, :arglists (quote ([m dim])), :doc "Return a vector of labels for a given array dimension. Return nil if the dimension is unlabelled."}, :name clojure.core.matrix/labels, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 13, :method-params ([m dim]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1388, :end-line 1388, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m dim])), :doc "Return a vector of labels for a given array dimension. Return nil if the dimension is unlabelled."}, zero-count {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 625, :column 7, :end-line 625, :end-column 17, :arglists (quote ([m])), :doc "Returns the number of zeros in an array.\n\n   Result will usually be a Long, however callers should note that for very large sparse arrays\n   the zero count may be a BigInteger, i.e. equal to or larger than 2^63."}, :name clojure.core.matrix/zero-count, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 17, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 625, :end-line 625, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns the number of zeros in an array.\n\n   Result will usually be a Long, however callers should note that for very large sparse arrays\n   the zero count may be a BigInteger, i.e. equal to or larger than 2^63."}, swap-rows {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1935, :column 7, :end-line 1935, :end-column 16, :arglists (quote ([m i j])), :doc "Swap row i with row j in a matrix, returning a new matrix"}, :name clojure.core.matrix/swap-rows, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 16, :method-params ([m i j]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1935, :end-line 1935, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m i j])), :doc "Swap row i with row j in a matrix, returning a new matrix"}, e* {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1439, :column 7, :end-line 1439, :end-column 9, :arglists (quote ([] [a] [a b] [a b & more])), :doc "An element-wise multiply operator equivalent to `mul`.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [a] [a b]), :arglists ([] [a] [a b] [a b & more]), :arglists-meta (nil nil nil nil)}}, :name clojure.core.matrix/e*, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 9, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [a] [a b]), :arglists ([] [a] [a b] [a b & more]), :arglists-meta (nil nil nil nil)}, :method-params ([] [a] [a b]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 1439, :end-line 1439, :max-fixed-arity 2, :fn-var true, :arglists ([] [a] [a b] [a b & more]), :doc "An element-wise multiply operator equivalent to `mul`."}, conjoin {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1043, :column 7, :end-line 1043, :end-column 14, :arglists (quote ([a b] [a b & more])), :doc "Adds a new value [b] as a new slice to an array [a], returning the extended array.\n   Broadcasts the new value to the correct shape of a slice of a if necessary.\n\n   This can be considered as the array equivalent of clojure.core/conj", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([a b]), :arglists ([a b] [a b & more]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/conjoin, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([a b]), :arglists ([a b] [a b & more]), :arglists-meta (nil nil)}, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1043, :end-line 1043, :max-fixed-arity 2, :fn-var true, :arglists ([a b] [a b & more]), :doc "Adds a new value [b] as a new slice to an array [a], returning the extended array.\n   Broadcasts the new value to the correct shape of a slice of a if necessary.\n\n   This can be considered as the array equivalent of clojure.core/conj"}, block-diagonal-matrix {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 247, :column 7, :end-line 247, :end-column 28, :arglists (quote ([blocks] [implementation blocks])), :doc "Constructs a block diagonal matrix for a given vector of 2D square matrices and arranges\n  the matrices along the main diagonal of the 2D matrix", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([blocks] [implementation blocks]), :arglists ([blocks] [implementation blocks]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/block-diagonal-matrix, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 28, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([blocks] [implementation blocks]), :arglists ([blocks] [implementation blocks]), :arglists-meta (nil nil)}, :method-params ([blocks] [implementation blocks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 247, :end-line 247, :max-fixed-arity 2, :fn-var true, :arglists ([blocks] [implementation blocks]), :doc "Constructs a block diagonal matrix for a given vector of 2D square matrices and arranges\n  the matrices along the main diagonal of the 2D matrix"}, multiply-row {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1940, :column 7, :end-line 1940, :end-column 19, :arglists (quote ([m i factor])), :doc "Multiply row i in a matrix by a constant factor"}, :name clojure.core.matrix/multiply-row, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 19, :method-params ([m i factor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1940, :end-line 1940, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m i factor])), :doc "Multiply row i in a matrix by a constant factor"}, log! {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the log function on all elements of an array, using double precision values. Mutates the array in-place.", :file nil}, :name clojure.core.matrix/log!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the log function on all elements of an array, using double precision values. Mutates the array in-place."}, supports-shape? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 396, :column 7, :end-line 396, :end-column 22, :arglists (quote ([m shape])), :doc "Returns true if the implementation supports creation of matrices with a specific shape."}, :name clojure.core.matrix/supports-shape?, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 22, :method-params ([m shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 396, :end-line 396, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m shape])), :doc "Returns true if the implementation supports creation of matrices with a specific shape."}, eseq {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1998, :column 7, :end-line 1998, :end-column 11, :arglists (quote ([m])), :doc "Returns all elements of an array as a sequence object in row-major order"}, :name clojure.core.matrix/eseq, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 11, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1998, :end-line 1998, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns all elements of an array as a sequence object in row-major order"}, label-index {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1393, :column 7, :end-line 1393, :end-column 18, :arglists (quote ([m dim label])), :doc "Return the index of a label along a given dimension. Returns nil if the label does not exist."}, :name clojure.core.matrix/label-index, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 18, :method-params ([m dim label]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1393, :end-line 1393, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m dim label])), :doc "Return the index of a label along a given dimension. Returns nil if the label does not exist."}, new-vector {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 135, :column 7, :end-line 135, :end-column 17, :arglists (quote ([length] [implementation length])), :doc "Constructs a new vector with the given length.\n   New matrix will contain default values as defined by the implementation (usually null or zero).\n   If the implementation supports mutable vectors, then the new vector will be fully mutable.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([length] [implementation length]), :arglists ([length] [implementation length]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/new-vector, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([length] [implementation length]), :arglists ([length] [implementation length]), :arglists-meta (nil nil)}, :method-params ([length] [implementation length]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 135, :end-line 135, :max-fixed-arity 2, :fn-var true, :arglists ([length] [implementation length]), :doc "Constructs a new vector with the given length.\n   New matrix will contain default values as defined by the implementation (usually null or zero).\n   If the implementation supports mutable vectors, then the new vector will be fully mutable."}, transpose! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1160, :column 7, :end-line 1160, :end-column 17, :arglists (quote ([m])), :doc "Transposes a square 2D matrix in-place.\n\n   Will throw an exception if not possible (e.g. if the matrix is not square or not mutable)."}, :name clojure.core.matrix/transpose!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 17, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1160, :end-line 1160, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Transposes a square 2D matrix in-place.\n\n   Will throw an exception if not possible (e.g. if the matrix is not square or not mutable)."}, mget {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([m] [m x] [m x y]), :arglists ([m] [m x] [m x y] [m x y & more]), :arglists-meta (nil nil nil nil)}, :inline-arities #{1 3 2}, :column 7, :line 745, :end-line 745, :arglists (quote ([m] [m x] [m x y] [m x y & more])), :doc "Gets a scalar value from an array at the specified position. Supports any number of dimensions.", :inline (fn ([m] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote mp/get-0d)) (clojure.core/list m))))) ([m x] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote mp/get-1d)) (clojure.core/list m) (clojure.core/list x))))) ([m x y] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote mp/get-2d)) (clojure.core/list m) (clojure.core/list x) (clojure.core/list y))))))}, :name clojure.core.matrix/mget, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([m] [m x] [m x y]), :arglists ([m] [m x] [m x y] [m x y & more]), :arglists-meta (nil nil nil nil)}, :method-params ([m] [m x] [m x y]), :inline-arities #{1 3 2}, :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 745, :end-line 745, :max-fixed-arity 3, :fn-var true, :arglists ([m] [m x] [m x y] [m x y & more]), :doc "Gets a scalar value from an array at the specified position. Supports any number of dimensions.", :inline (fn ([m] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote mp/get-0d)) (clojure.core/list m))))) ([m x] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote mp/get-1d)) (clojure.core/list m) (clojure.core/list x))))) ([m x y] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote mp/get-2d)) (clojure.core/list m) (clojure.core/list x) (clojure.core/list y))))))}, atan {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the atan function on all elements of an array, using double precision values. Returns a new array.", :file nil}, :name clojure.core.matrix/atan, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the atan function on all elements of an array, using double precision values. Returns a new array."}, cosh! {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the cosh function on all elements of an array, using double precision values. Mutates the array in-place.", :file nil}, :name clojure.core.matrix/cosh!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the cosh function on all elements of an array, using double precision values. Mutates the array in-place."}, ge {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1306, :column 7, :end-line 1306, :end-column 9, :arglists (quote ([m a] [m a & more])), :doc "Element-wise greater-than-or-equal-to comparison operation. Returns a binary\n  array where elements greater-than or equal to the argument are represented by 1\n  and elements less-than to the argument are 0.\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (ge 2 3) ;=> 0\n  (ge 3 3) ;=> 1\n  (ge [[1 5] [3 6]] 3) ;=> [[0 1] [1 1]]\n  (ge [[1 5] [4 6]] [[2 3] [5 6]]) ;=> [[0 1] [0 1]]", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([m a]), :arglists ([m a] [m a & more]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/ge, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 9, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([m a]), :arglists ([m a] [m a & more]), :arglists-meta (nil nil)}, :method-params ([m a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1306, :end-line 1306, :max-fixed-arity 2, :fn-var true, :arglists ([m a] [m a & more]), :doc "Element-wise greater-than-or-equal-to comparison operation. Returns a binary\n  array where elements greater-than or equal to the argument are represented by 1\n  and elements less-than to the argument are 0.\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (ge 2 3) ;=> 0\n  (ge 3 3) ;=> 1\n  (ge [[1 5] [3 6]] 3) ;=> [[0 1] [1 1]]\n  (ge [[1 5] [4 6]] [[2 3] [5 6]]) ;=> [[0 1] [0 1]]"}, ensure-mutable {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 281, :column 7, :end-line 281, :end-column 21, :arglists (quote ([m])), :doc "Checks if an array is mutable, and if not converts to a new mutable array. Guarantees\n   that the result will be mutable, but may not be the same type as the original array."}, :name clojure.core.matrix/ensure-mutable, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 21, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 281, :end-line 281, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Checks if an array is mutable, and if not converts to a new mutable array. Guarantees\n   that the result will be mutable, but may not be the same type as the original array."}, slice-views {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 966, :column 7, :end-line 966, :end-column 18, :arglists (quote ([m] [m dimension])), :doc "Gets a sequence of views of the slices of an array. If dimension is supplied, slices along a given dimension,\n   otherwise slices along the first dimension. If the matrix implementation supports mutable views, these views\n   can be used to mutate portions of the original array.\n\n   The key difference between 'slices' and 'slice-views' is that 'slice-views' must always return views. In order\n   to ensure this behaviour on mutable 1-dimensioanal arrays, it must return a sequence of 0-dimensioanal arrays.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([m] [m dimension]), :arglists ([m] [m dimension]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/slice-views, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([m] [m dimension]), :arglists ([m] [m dimension]), :arglists-meta (nil nil)}, :method-params ([m] [m dimension]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 966, :end-line 966, :max-fixed-arity 2, :fn-var true, :arglists ([m] [m dimension]), :doc "Gets a sequence of views of the slices of an array. If dimension is supplied, slices along a given dimension,\n   otherwise slices along the first dimension. If the matrix implementation supports mutable views, these views\n   can be used to mutate portions of the original array.\n\n   The key difference between 'slices' and 'slice-views' is that 'slice-views' must always return views. In order\n   to ensure this behaviour on mutable 1-dimensioanal arrays, it must return a sequence of 0-dimensioanal arrays."}, diagonal-matrix {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 287, :column 7, :end-line 287, :end-column 22, :arglists (quote ([diagonal-values] [implementation diagonal-values])), :doc "Constructs a 2D diagonal matrix with the given numerical values on the main diagonal.\n   All off-diagonal elements will be zero, and diagonal-values may be a vector or any\n  Clojure sequence of values.\n\n   Diagonal matrices constructed this way may use specialised storage formats, hence may not be fully mutable.\n   Use (mutable (diagonal-matrix ...)) if you need to guarantee a mutable matrix.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([diagonal-values] [implementation diagonal-values]), :arglists ([diagonal-values] [implementation diagonal-values]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/diagonal-matrix, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([diagonal-values] [implementation diagonal-values]), :arglists ([diagonal-values] [implementation diagonal-values]), :arglists-meta (nil nil)}, :method-params ([diagonal-values] [implementation diagonal-values]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 287, :end-line 287, :max-fixed-arity 2, :fn-var true, :arglists ([diagonal-values] [implementation diagonal-values]), :doc "Constructs a 2D diagonal matrix with the given numerical values on the main diagonal.\n   All off-diagonal elements will be zero, and diagonal-values may be a vector or any\n  Clojure sequence of values.\n\n   Diagonal matrices constructed this way may use specialised storage formats, hence may not be fully mutable.\n   Use (mutable (diagonal-matrix ...)) if you need to guarantee a mutable matrix."}, set-inner-product! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1638, :column 7, :end-line 1638, :end-column 25, :arglists (quote ([m a b] [m a b factor])), :doc "Sets an array equal to the inner product of two numerical arrays.\n   Returns the mutated first array.\n   This is equivalent to (assign! m (inner-product a b)) but may be optimised by the underlying implementation.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([m a b] [m a b factor]), :arglists ([m a b] [m a b factor]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/set-inner-product!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([m a b] [m a b factor]), :arglists ([m a b] [m a b factor]), :arglists-meta (nil nil)}, :method-params ([m a b] [m a b factor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1638, :end-line 1638, :max-fixed-arity 4, :fn-var true, :arglists ([m a b] [m a b factor]), :doc "Sets an array equal to the inner product of two numerical arrays.\n   Returns the mutated first array.\n   This is equivalent to (assign! m (inner-product a b)) but may be optimised by the underlying implementation."}, sin! {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the sin function on all elements of an array, using double precision values. Mutates the array in-place.", :file nil}, :name clojure.core.matrix/sin!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the sin function on all elements of an array, using double precision values. Mutates the array in-place."}, mutable? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 640, :column 7, :end-line 640, :end-column 15, :arglists (quote ([m])), :doc "Returns true if the matrix is mutable, i.e. supports setting of values.\n\n   It is possible for some matrix implementations to have constraints on mutability (e.g. mutable only in diagonal elements),\n   this method will still return true for such cases."}, :name clojure.core.matrix/mutable?, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 15, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 640, :end-line 640, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns true if the matrix is mutable, i.e. supports setting of values.\n\n   It is possible for some matrix implementations to have constraints on mutability (e.g. mutable only in diagonal elements),\n   this method will still return true for such cases."}, normalise! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1715, :column 7, :end-line 1715, :end-column 17, :arglists (quote ([v])), :doc "Like 'normalise', but mutates a numerical vector in-place (scales to unit length).\n   Returns the modified vector."}, :name clojure.core.matrix/normalise!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 17, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1715, :end-line 1715, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Like 'normalise', but mutates a numerical vector in-place (scales to unit length).\n   Returns the modified vector."}, scalar-array {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 202, :column 7, :end-line 202, :end-column 19, :arglists (quote ([value] [implementation value])), :doc "Creates a new zero-dimensional array containing the specified scalar value.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([value] [implementation value]), :arglists ([value] [implementation value]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/scalar-array, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([value] [implementation value]), :arglists ([value] [implementation value]), :arglists-meta (nil nil)}, :method-params ([value] [implementation value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 202, :end-line 202, :max-fixed-arity 2, :fn-var true, :arglists ([value] [implementation value]), :doc "Creates a new zero-dimensional array containing the specified scalar value."}, supports-dimensionality? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 389, :column 7, :end-line 389, :end-column 31, :arglists (quote ([m dimension-count])), :doc "Returns true if the implementation for a given matrix supports a specific dimensionality, i.e.\n   can natively create and manipulate matrices with the given number of dimensions"}, :name clojure.core.matrix/supports-dimensionality?, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 31, :method-params ([m dimension-count]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 389, :end-line 389, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m dimension-count])), :doc "Returns true if the implementation for a given matrix supports a specific dimensionality, i.e.\n   can natively create and manipulate matrices with the given number of dimensions"}, transform {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1500, :column 7, :end-line 1500, :end-column 16, :arglists (quote ([t v])), :doc "Transforms a given vector with a transformation, returning a new vector.\n\n   The transformation may be a 2D matrix, but other types of transformation may also be supported\n   e.g. affine transformations, unary operators."}, :name clojure.core.matrix/transform, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 16, :method-params ([t v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1500, :end-line 1500, :max-fixed-arity 2, :fn-var true, :arglists (quote ([t v])), :doc "Transforms a given vector with a transformation, returning a new vector.\n\n   The transformation may be a 2D matrix, but other types of transformation may also be supported\n   e.g. affine transformations, unary operators."}, softmax {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1920, :column 7, :end-line 1920, :end-column 14, :arglists (quote ([a])), :doc "Computes the softmax function for a numerical vector."}, :name clojure.core.matrix/softmax, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 14, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1920, :end-line 1920, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "Computes the softmax function for a numerical vector."}, set-selection {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 902, :column 7, :end-line 902, :end-column 20, :arglists (quote ([a & args])), :doc "Like select but sets the elements in the selection to the value of the final argument.\n   Leaves a unchanged and returns the modified array", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(a args)], :arglists ([a & args]), :arglists-meta (nil)}}, :name clojure.core.matrix/set-selection, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(a args)], :arglists ([a & args]), :arglists-meta (nil)}, :method-params [(a args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 902, :end-line 902, :max-fixed-arity 1, :fn-var true, :arglists ([a & args]), :doc "Like select but sets the elements in the selection to the value of the final argument.\n   Leaves a unchanged and returns the modified array"}, column-count {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 565, :column 7, :end-line 565, :end-column 19, :arglists (quote ([m])), :doc "Returns the number of columns in a matrix (array must be 2D or more)", :inline (fn ([m] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote clojure.core.matrix/dimension-count)) (clojure.core/list m) (clojure.core/list 1))))))}, :name clojure.core.matrix/column-count, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 19, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 565, :end-line 565, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns the number of columns in a matrix (array must be 2D or more)", :inline (fn ([m] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote clojure.core.matrix/dimension-count)) (clojure.core/list m) (clojure.core/list 1))))))}, logistic {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1887, :column 7, :end-line 1887, :end-column 15, :arglists (quote ([a])), :doc "Computes the sigmoid (logistic) function for every element of an array."}, :name clojure.core.matrix/logistic, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 15, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1887, :end-line 1887, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "Computes the sigmoid (logistic) function for every element of an array."}, mmul {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1426, :column 7, :end-line 1426, :end-column 11, :arglists (quote ([] [a] [a b] [a b & more])), :doc "Performs matrix multiplication on matrices or vectors. Equivalent to\n  inner-product when applied to vectors.  Will treat a 1D vector roughly as a\n  1xN matrix (row vector) when it's the first argument, or as an Nx1 matrix\n  (column vector) when it's the second argument--except that the dimensionality\n  of the result will be different from what it would be with matrix arguments.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [a] [a b]), :arglists ([] [a] [a b] [a b & more]), :arglists-meta (nil nil nil nil)}}, :name clojure.core.matrix/mmul, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [a] [a b]), :arglists ([] [a] [a b] [a b & more]), :arglists-meta (nil nil nil nil)}, :method-params ([] [a] [a b]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 1426, :end-line 1426, :max-fixed-arity 2, :fn-var true, :arglists ([] [a] [a b] [a b & more]), :doc "Performs matrix multiplication on matrices or vectors. Equivalent to\n  inner-product when applied to vectors.  Will treat a 1D vector roughly as a\n  1xN matrix (row vector) when it's the first argument, or as an Nx1 matrix\n  (column vector) when it's the second argument--except that the dimensionality\n  of the result will be different from what it would be with matrix arguments."}, cos {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the cos function on all elements of an array, using double precision values. Returns a new array.", :file nil}, :name clojure.core.matrix/cos, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the cos function on all elements of an array, using double precision values. Returns a new array."}, non-zero-indices {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1986, :column 7, :end-line 1986, :end-column 23, :arglists (quote ([m])), :doc "Gets the non-zero indices of an array.\n   - For a 1D vector, returns an ordered index list.\n   - For a higher dimensional array, returns the non-zero-indices for each slice in row-major order."}, :name clojure.core.matrix/non-zero-indices, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 23, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1986, :end-line 1986, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Gets the non-zero indices of an array.\n   - For a 1D vector, returns an ordered index list.\n   - For a higher dimensional array, returns the non-zero-indices for each slice in row-major order."}, log10 {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the log10 function on all elements of an array, using double precision values. Returns a new array.", :file nil}, :name clojure.core.matrix/log10, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the log10 function on all elements of an array, using double precision values. Returns a new array."}, tan {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the tan function on all elements of an array, using double precision values. Returns a new array.", :file nil}, :name clojure.core.matrix/tan, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the tan function on all elements of an array, using double precision values. Returns a new array."}, cbrt {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the cbrt function on all elements of an array, using double precision values. Returns a new array.", :file nil}, :name clojure.core.matrix/cbrt, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the cbrt function on all elements of an array, using double precision values. Returns a new array."}, eq {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1340, :column 7, :end-line 1340, :end-column 9, :arglists (quote ([m a])), :doc "Element-wise equal comparison operation. Returns a binary\narray where elements equal to the argument are represented by 1 and\nelements not-equal to the argument are 0.\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (eq 1 1) ;=> 1\n  (eq 5 1) ;=> 0\n  (eq [[1 5] [3 6]] 3) ;=> [[0 0] [1 0]]\n  (eq [[1 5] [4 6]] [[2 3] [5 6]]) ;=> [[0 0] [0 1]]"}, :name clojure.core.matrix/eq, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 9, :method-params ([m a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1340, :end-line 1340, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m a])), :doc "Element-wise equal comparison operation. Returns a binary\narray where elements equal to the argument are represented by 1 and\nelements not-equal to the argument are 0.\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (eq 1 1) ;=> 1\n  (eq 5 1) ;=> 0\n  (eq [[1 5] [3 6]] 3) ;=> [[0 0] [1 0]]\n  (eq [[1 5] [4 6]] [[2 3] [5 6]]) ;=> [[0 0] [0 1]]"}, index {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 102, :column 7, :end-line 102, :end-column 12, :arglists (quote ([data] [implementation data])), :doc "Constructs a new 1-dimensional integer index from given data.\n\n   The data may be in one of the following forms:\n   - A valid existing index\n   - A 1D array of integer values\n   - A sequence of integer values\n\n   If implementation is not specified, uses the current matrix library as specified\n   in *matrix-implementation* to produce the index object.\n\n   If the implementation does not support its own native index types, will return a\n   valid index from a default implementation.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([data] [implementation data]), :arglists ([data] [implementation data]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/index, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([data] [implementation data]), :arglists ([data] [implementation data]), :arglists-meta (nil nil)}, :method-params ([data] [implementation data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 2, :fn-var true, :arglists ([data] [implementation data]), :doc "Constructs a new 1-dimensional integer index from given data.\n\n   The data may be in one of the following forms:\n   - A valid existing index\n   - A 1D array of integer values\n   - A sequence of integer values\n\n   If implementation is not specified, uses the current matrix library as specified\n   in *matrix-implementation* to produce the index object.\n\n   If the implementation does not support its own native index types, will return a\n   valid index from a default implementation."}, emul! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1486, :column 27, :end-line 1486, :end-column 32, :deprecated true, :arglists (quote ([a] [a b] [a b & more])), :doc "Performs in-place element-wise multiplication of numerical arrays.\n\n   Returns the first argument after mutation.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([a] [a b]), :arglists ([a] [a b] [a b & more]), :arglists-meta (nil nil nil)}}, :name clojure.core.matrix/emul!, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([a] [a b]), :arglists ([a] [a b] [a b & more]), :arglists-meta (nil nil nil)}, :method-params ([a] [a b]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1486, :deprecated true, :end-line 1486, :max-fixed-arity 2, :fn-var true, :arglists ([a] [a b] [a b & more]), :doc "Performs in-place element-wise multiplication of numerical arrays.\n\n   Returns the first argument after mutation."}, diagonal {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1011, :column 7, :end-line 1011, :end-column 15, :arglists (quote ([m] [m k])), :doc "Returns the specified diagonal of a 2D matrix as a vector.\n   If k>0, returns a diagonal above the main diagonal.\n   If k<0, returns a diagonal below the main diagonal.\n   Works on both square and rectangular matrices.\n   Returns empty vector if value of k is out of range (outside matrix)", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([m] [m k]), :arglists ([m] [m k]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/diagonal, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([m] [m k]), :arglists ([m] [m k]), :arglists-meta (nil nil)}, :method-params ([m] [m k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1011, :end-line 1011, :max-fixed-arity 2, :fn-var true, :arglists ([m] [m k]), :doc "Returns the specified diagonal of a 2D matrix as a vector.\n   If k>0, returns a diagonal above the main diagonal.\n   If k<0, returns a diagonal below the main diagonal.\n   Works on both square and rectangular matrices.\n   Returns empty vector if value of k is out of range (outside matrix)"}, softmax! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1925, :column 7, :end-line 1925, :end-column 15, :arglists (quote ([a])), :doc "Computes the softmax function for every element of a numerical vector. Mutates the vector."}, :name clojure.core.matrix/softmax!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 15, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1925, :end-line 1925, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "Computes the softmax function for every element of a numerical vector. Mutates the vector."}, submatrix {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 925, :column 7, :end-line 925, :end-column 16, :arglists (quote ([m index-ranges] [m dimension index-range] [m row-start row-length col-start col-length])), :doc "Gets a view of a submatrix, for a set of index ranges.\n   Index ranges should be [start, length] pairs.\n   Index range pairs can be nil (gets the whole range) ", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([m index-ranges] [m dimension index-range] [m row-start row-length col-start col-length]), :arglists ([m index-ranges] [m dimension index-range] [m row-start row-length col-start col-length]), :arglists-meta (nil nil nil)}}, :name clojure.core.matrix/submatrix, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([m index-ranges] [m dimension index-range] [m row-start row-length col-start col-length]), :arglists ([m index-ranges] [m dimension index-range] [m row-start row-length col-start col-length]), :arglists-meta (nil nil nil)}, :method-params ([m index-ranges] [m dimension index-range] [m row-start row-length col-start col-length]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 925, :end-line 925, :max-fixed-arity 5, :fn-var true, :arglists ([m index-ranges] [m dimension index-range] [m row-start row-length col-start col-length]), :doc "Gets a view of a submatrix, for a set of index ranges.\n   Index ranges should be [start, length] pairs.\n   Index range pairs can be nil (gets the whole range) "}, set-current-implementation {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 2152, :column 7, :end-line 2152, :end-column 33, :arglists (quote ([m])), :doc "Sets the currently active core.matrix implementation.\n\n   Parameter may be\n    - A known keyword for the implementation e.g. :vectorz\n    - An existing instance from the implementation\n\n   This is used primarily for functions that construct new matrices, i.e. it determines the\n   implementation used for expressions like: (matrix [[1 2] [3 4]])"}, :name clojure.core.matrix/set-current-implementation, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 33, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2152, :end-line 2152, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Sets the currently active core.matrix implementation.\n\n   Parameter may be\n    - A known keyword for the implementation e.g. :vectorz\n    - An existing instance from the implementation\n\n   This is used primarily for functions that construct new matrices, i.e. it determines the\n   implementation used for expressions like: (matrix [[1 2] [3 4]])"}, add! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1528, :column 7, :end-line 1528, :end-column 11, :arglists (quote ([a] [a b] [a b & more])), :doc "Performs element-wise mutable addition on one or more numerical arrays. This is the mutable\n   equivalent of `add`.\n\n   When adding many arrays, use of `add!` with a mutable array as the first argument is\n   usually faster than repreated use of `add` because it can avoid unnecessary copying.\n\n   Returns the first array after it has been mutated.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([a] [a b]), :arglists ([a] [a b] [a b & more]), :arglists-meta (nil nil nil)}}, :name clojure.core.matrix/add!, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([a] [a b]), :arglists ([a] [a b] [a b & more]), :arglists-meta (nil nil nil)}, :method-params ([a] [a b]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1528, :end-line 1528, :max-fixed-arity 2, :fn-var true, :arglists ([a] [a b] [a b & more]), :doc "Performs element-wise mutable addition on one or more numerical arrays. This is the mutable\n   equivalent of `add`.\n\n   When adding many arrays, use of `add!` with a mutable array as the first argument is\n   usually faster than repreated use of `add` because it can avoid unnecessary copying.\n\n   Returns the first array after it has been mutated."}, tan! {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the tan function on all elements of an array, using double precision values. Mutates the array in-place.", :file nil}, :name clojure.core.matrix/tan!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the tan function on all elements of an array, using double precision values. Mutates the array in-place."}, lerp! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1589, :column 7, :end-line 1589, :end-column 12, :arglists (quote ([a b factor])), :doc "Performs linear interpolation between two arrays. If factor is 0.0, result will be equal to the first vector.\n   If factor is 1.0, result will be equal to the second vector. Returns a the mutated first array."}, :name clojure.core.matrix/lerp!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 12, :method-params ([a b factor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1589, :end-line 1589, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a b factor])), :doc "Performs linear interpolation between two arrays. If factor is 0.0, result will be equal to the first vector.\n   If factor is 1.0, result will be equal to the second vector. Returns a the mutated first array."}, set-indices! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 916, :column 7, :end-line 916, :end-column 19, :arglists (quote ([a indices values])), :doc "like set-indices but destructively modifies array in place"}, :name clojure.core.matrix/set-indices!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 19, :method-params ([a indices values]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 916, :end-line 916, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a indices values])), :doc "like set-indices but destructively modifies array in place"}, sub {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1649, :column 7, :end-line 1649, :end-column 10, :arglists (quote ([a] [a b] [a b & more])), :doc "Performs element-wise subtraction on one or more numerical arrays.\n\n   For a single argument, returns the negation.\n\n   Returns a new array.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([a] [a b]), :arglists ([a] [a b] [a b & more]), :arglists-meta (nil nil nil)}}, :name clojure.core.matrix/sub, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([a] [a b]), :arglists ([a] [a b] [a b & more]), :arglists-meta (nil nil nil)}, :method-params ([a] [a b]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1649, :end-line 1649, :max-fixed-arity 2, :fn-var true, :arglists ([a] [a b] [a b & more]), :doc "Performs element-wise subtraction on one or more numerical arrays.\n\n   For a single argument, returns the negation.\n\n   Returns a new array."}, add-row {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1945, :column 7, :end-line 1945, :end-column 14, :arglists (quote ([m i j] [m i j factor])), :doc "Add a row j (optionally multiplied by a scalar factor) to a row i\n   and replace row i with the result", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([m i j] [m i j factor]), :arglists ([m i j] [m i j factor]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/add-row, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([m i j] [m i j factor]), :arglists ([m i j] [m i j factor]), :arglists-meta (nil nil)}, :method-params ([m i j] [m i j factor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1945, :end-line 1945, :max-fixed-arity 4, :fn-var true, :arglists ([m i j] [m i j factor]), :doc "Add a row j (optionally multiplied by a scalar factor) to a row i\n   and replace row i with the result"}, slice-dims {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 821, :column 8, :end-line 821, :end-column 18, :private true, :arglists (quote ([m args slice-func])), :doc "Slices along all dimensions where there is a numerical argument"}, :private true, :name clojure.core.matrix/slice-dims, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 18, :method-params ([m args slice-func]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 821, :end-line 821, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m args slice-func])), :doc "Slices along all dimensions where there is a numerical argument"}, column-matrix {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 218, :column 7, :end-line 218, :end-column 20, :arglists (quote ([data] [implementation data])), :doc "Constructs a column matrix with the given data. The returned matrix is a 2D Nx1 column matrix.\n\n   The data must be either a valid existing vector or a sequence of scalar values.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([data] [implementation data]), :arglists ([data] [implementation data]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/column-matrix, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([data] [implementation data]), :arglists ([data] [implementation data]), :arglists-meta (nil nil)}, :method-params ([data] [implementation data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 218, :end-line 218, :max-fixed-arity 2, :fn-var true, :arglists ([data] [implementation data]), :doc "Constructs a column matrix with the given data. The returned matrix is a 2D Nx1 column matrix.\n\n   The data must be either a valid existing vector or a sequence of scalar values."}, exp! {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the exp function on all elements of an array, using double precision values. Mutates the array in-place.", :file nil}, :name clojure.core.matrix/exp!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the exp function on all elements of an array, using double precision values. Mutates the array in-place."}, add-scaled {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1557, :column 7, :end-line 1557, :end-column 17, :arglists (quote ([m a factor])), :doc "Adds a numerical array scaled by a given factor to the first array"}, :name clojure.core.matrix/add-scaled, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 17, :method-params ([m a factor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1557, :end-line 1557, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m a factor])), :doc "Adds a numerical array scaled by a given factor to the first array"}, cmp {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1214, :column 7, :end-line 1214, :end-column 10, :arglists (quote ([a b])), :doc "Element-wise of comparisons of two arrays. Returns the signum of the difference\n   between corresponding elements in two arrays.\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (cmp 1 3) ;=> -1\n  (cmp 0 0) ;=> 0\n  (cmp 1 -1) ;=> 1\n  (cmp [[1 3] [5 5]] [[3 3] [5 3]]) ;=> [[-1 0] [0 1]]\n  (cmp [[1 4][1 5][1 8]] [[1 2][1 5][2 7]]) ;=> [[0 1][0 0][-1 1]]\n  "}, :name clojure.core.matrix/cmp, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 10, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1214, :end-line 1214, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "Element-wise of comparisons of two arrays. Returns the signum of the difference\n   between corresponding elements in two arrays.\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (cmp 1 3) ;=> -1\n  (cmp 0 0) ;=> 0\n  (cmp 1 -1) ;=> 1\n  (cmp [[1 3] [5 5]] [[3 3] [5 3]]) ;=> [[-1 0] [0 1]]\n  (cmp [[1 4][1 5][1 8]] [[1 2][1 5][2 7]]) ;=> [[0 1][0 0][-1 1]]\n  "}, sqrt {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the sqrt function on all elements of an array, using double precision values. Returns a new array.", :file nil}, :name clojure.core.matrix/sqrt, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the sqrt function on all elements of an array, using double precision values. Returns a new array."}, vec? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 473, :column 7, :end-line 473, :end-column 11, :arglists (quote ([m])), :doc "Returns true if the parameter is a core.matrix vector (1-dimensional array)"}, :name clojure.core.matrix/vec?, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 11, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 473, :end-line 473, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns true if the parameter is a core.matrix vector (1-dimensional array)"}, scale! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1688, :column 7, :end-line 1688, :end-column 13, :arglists (quote ([m factor] [m factor & more-factors])), :doc "Scales a numerical array by one or more scalar factors (in place). The default implementation supports\n   numerical arrays and numbers as scalar values, however matrix implementations may extend this to\n   support other scalar types.\n\n   Returns the matrix after it has been mutated.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([m factor]), :arglists ([m factor] [m factor & more-factors]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/scale!, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([m factor]), :arglists ([m factor] [m factor & more-factors]), :arglists-meta (nil nil)}, :method-params ([m factor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1688, :end-line 1688, :max-fixed-arity 2, :fn-var true, :arglists ([m factor] [m factor & more-factors]), :doc "Scales a numerical array by one or more scalar factors (in place). The default implementation supports\n   numerical arrays and numbers as scalar values, however matrix implementations may extend this to\n   support other scalar types.\n\n   Returns the matrix after it has been mutated."}, scale {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1678, :column 7, :end-line 1678, :end-column 12, :arglists (quote ([m factor] [m factor & more-factors])), :doc "Scales a array by one or more scalar factors. The default implementation supports numerical arrays and\n   numbers as scalar values, however matrix implementations may extend this to support other scalar types.\n\n   Returns a new scaled matrix.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([m factor]), :arglists ([m factor] [m factor & more-factors]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/scale, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([m factor]), :arglists ([m factor] [m factor & more-factors]), :arglists-meta (nil nil)}, :method-params ([m factor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1678, :end-line 1678, :max-fixed-arity 2, :fn-var true, :arglists ([m factor] [m factor & more-factors]), :doc "Scales a array by one or more scalar factors. The default implementation supports numerical arrays and\n   numbers as scalar values, however matrix implementations may extend this to support other scalar types.\n\n   Returns a new scaled matrix."}, set-column! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1969, :column 7, :end-line 1969, :end-column 18, :arglists (quote ([m i column])), :doc "Sets a column in a matrix using a specified vector."}, :name clojure.core.matrix/set-column!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 18, :method-params ([m i column]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1969, :end-line 1969, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m i column])), :doc "Sets a column in a matrix using a specified vector."}, softplus! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1903, :column 7, :end-line 1903, :end-column 16, :arglists (quote ([a])), :doc "Computes the softplus function for every element of an array. Mutates the array."}, :name clojure.core.matrix/softplus!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 16, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1903, :end-line 1903, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "Computes the softplus function for every element of an array. Mutates the array."}, subvector {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 936, :column 7, :end-line 936, :end-column 16, :arglists (quote ([m start length])), :doc "Gets a view of part of a vector. The view maintains a reference to the original,\n   so can be used to modify the original vector if it is mutable."}, :name clojure.core.matrix/subvector, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 16, :method-params ([m start length]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 936, :end-line 936, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m start length])), :doc "Gets a view of part of a vector. The view maintains a reference to the original,\n   so can be used to modify the original vector if it is mutable."}, inner-product {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1736, :column 7, :end-line 1736, :end-column 20, :arglists (quote ([] [a] [a b] [a b & more])), :doc "Computes the inner product of numerical arrays.\n\n   For matrix/matrix and matrix/vector arguments, this is equivalent to matrix multiplication.\n\n   The inner product of two arrays with indexed dimensions {..i j} and {j k..} has dimensions {..i k..}. The inner-product of two vectors will be scalar.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [a] [a b]), :arglists ([] [a] [a b] [a b & more]), :arglists-meta (nil nil nil nil)}}, :name clojure.core.matrix/inner-product, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [a] [a b]), :arglists ([] [a] [a b] [a b & more]), :arglists-meta (nil nil nil nil)}, :method-params ([] [a] [a b]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 1736, :end-line 1736, :max-fixed-arity 2, :fn-var true, :arglists ([] [a] [a b] [a b & more]), :doc "Computes the inner product of numerical arrays.\n\n   For matrix/matrix and matrix/vector arguments, this is equivalent to matrix multiplication.\n\n   The inner product of two arrays with indexed dimensions {..i j} and {j k..} has dimensions {..i k..}. The inner-product of two vectors will be scalar."}, sparse? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 530, :column 7, :end-line 530, :end-column 14, :arglists (quote ([m])), :doc "Returns true if an array is sparse, i.e. the implementation supports storage of the entire\n   array in less memory than would normally be implied by the number of elements.\n\n   Sparse matrices may have memory requirements that scale with the number of non-zero elements\n   rather than the total number of elements, for example."}, :name clojure.core.matrix/sparse?, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 14, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 530, :end-line 530, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns true if an array is sparse, i.e. the implementation supports storage of the entire\n   array in less memory than would normally be implied by the number of elements.\n\n   Sparse matrices may have memory requirements that scale with the number of non-zero elements\n   rather than the total number of elements, for example."}, to-degrees! {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the to-degrees function on all elements of an array, using double precision values. Mutates the array in-place.", :file nil}, :name clojure.core.matrix/to-degrees!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the to-degrees function on all elements of an array, using double precision values. Mutates the array in-place."}, cbrt! {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the cbrt function on all elements of an array, using double precision values. Mutates the array in-place.", :file nil}, :name clojure.core.matrix/cbrt!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the cbrt function on all elements of an array, using double precision values. Mutates the array in-place."}, inverse {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1796, :column 7, :end-line 1796, :end-column 14, :arglists (quote ([m])), :doc "Calculates the inverse of a 2D numerical matrix.\n\n   Returns nil if the matrix is singular. May throw an exception if the implementation does not support inverses."}, :name clojure.core.matrix/inverse, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 14, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1796, :end-line 1796, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Calculates the inverse of a 2D numerical matrix.\n\n   Returns nil if the matrix is singular. May throw an exception if the implementation does not support inverses."}, square? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 590, :column 7, :end-line 590, :end-column 14, :arglists (quote ([m])), :doc "Returns true if matrix is square (i.e. a 2D array with same number of rows and columns)"}, :name clojure.core.matrix/square?, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 14, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 590, :end-line 590, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns true if matrix is square (i.e. a 2D array with same number of rows and columns)"}, transpose {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1149, :column 7, :end-line 1149, :end-column 16, :arglists (quote ([m] [m ordering])), :doc "Transposes a matrix, returning a new matrix. For 2D matrices, rows and columns are swapped.\n   More generally, the dimension indices are reversed for any shape of array. Note that 1D vectors\n   and scalars will be returned unchanged.\n\n   If ordering is provided, will re-order dimensions according to the provided order.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([m] [m ordering]), :arglists ([m] [m ordering]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/transpose, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([m] [m ordering]), :arglists ([m] [m ordering]), :arglists-meta (nil nil)}, :method-params ([m] [m ordering]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1149, :end-line 1149, :max-fixed-arity 2, :fn-var true, :arglists ([m] [m ordering]), :doc "Transposes a matrix, returning a new matrix. For 2D matrices, rows and columns are swapped.\n   More generally, the dimension indices are reversed for any shape of array. Note that 1D vectors\n   and scalars will be returned unchanged.\n\n   If ordering is provided, will re-order dimensions according to the provided order."}, columns {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 996, :column 7, :end-line 996, :end-column 14, :arglists (quote ([m])), :doc "Gets the columns of a matrix, as a sequence of 1D vectors.\n\n   If the array has more than 2 dimensions, will return the columns from all slices in order."}, :name clojure.core.matrix/columns, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 14, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 996, :end-line 996, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Gets the columns of a matrix, as a sequence of 1D vectors.\n\n   If the array has more than 2 dimensions, will return the columns from all slices in order."}, e== {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1368, :column 7, :end-line 1368, :end-column 10, :arglists (quote ([m1] [m1 m2] [m1 m2 & more])), :doc "Returns true if all corresponding array elements are numerically equal.\n\n   Throws an error if any elements of the arrays being compared are not numerical values.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([m1] [m1 m2]), :arglists ([m1] [m1 m2] [m1 m2 & more]), :arglists-meta (nil nil nil)}}, :name clojure.core.matrix/e==, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([m1] [m1 m2]), :arglists ([m1] [m1 m2] [m1 m2 & more]), :arglists-meta (nil nil nil)}, :method-params ([m1] [m1 m2]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1368, :end-line 1368, :max-fixed-arity 2, :fn-var true, :arglists ([m1] [m1 m2] [m1 m2 & more]), :doc "Returns true if all corresponding array elements are numerically equal.\n\n   Throws an error if any elements of the arrays being compared are not numerical values."}, det {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1787, :column 7, :end-line 1787, :end-column 10, :arglists (quote ([a])), :doc "Calculates the determinant of a 2D square numerical matrix.\n\n   May throw an exception if the implementation does not support computation of determinants."}, :name clojure.core.matrix/det, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 10, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1787, :end-line 1787, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "Calculates the determinant of a 2D square numerical matrix.\n\n   May throw an exception if the implementation does not support computation of determinants."}, broadcast {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1126, :column 7, :end-line 1126, :end-column 16, :arglists (quote ([m shape])), :doc "Broadcasts a matrix to a specified shape. Returns a new matrix with the shape specified.\n   The broadcasted matrix may be a view over the original matrix: attempting to modify the\n   broadcasted matrix therefore has undefined results.\n\n   Will throw an exception if broadcast to the target shape is not possible."}, :name clojure.core.matrix/broadcast, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 16, :method-params ([m shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1126, :end-line 1126, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m shape])), :doc "Broadcasts a matrix to a specified shape. Returns a new matrix with the shape specified.\n   The broadcasted matrix may be a view over the original matrix: attempting to modify the\n   broadcasted matrix therefore has undefined results.\n\n   Will throw an exception if broadcast to the target shape is not possible."}, zero-matrix? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 498, :column 7, :end-line 498, :end-column 19, :arglists (quote ([m])), :doc "Returns true if all the elements of the parameter are zero."}, :name clojure.core.matrix/zero-matrix?, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 19, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 498, :end-line 498, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns true if all the elements of the parameter are zero."}, trace {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1814, :column 7, :end-line 1814, :end-column 12, :arglists (quote ([a])), :doc "Calculates the trace of a 2D numerical matrix (sum of elements on main diagonal).\n\n   The matrix need not be square."}, :name clojure.core.matrix/trace, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 12, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1814, :end-line 1814, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "Calculates the trace of a 2D numerical matrix (sum of elements on main diagonal).\n\n   The matrix need not be square."}, zero-vector {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 124, :column 7, :end-line 124, :end-column 18, :arglists (quote ([length] [implementation length])), :doc "Constructs a new zero-filled numerical vector with the given length.\n\n   Implementations are encouraged to return immutable vectors or sparse vectors\n   for efficency whre available.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([length] [implementation length]), :arglists ([length] [implementation length]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/zero-vector, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([length] [implementation length]), :arglists ([length] [implementation length]), :arglists-meta (nil nil)}, :method-params ([length] [implementation length]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 2, :fn-var true, :arglists ([length] [implementation length]), :doc "Constructs a new zero-filled numerical vector with the given length.\n\n   Implementations are encouraged to return immutable vectors or sparse vectors\n   for efficency whre available."}, conforming? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 654, :column 7, :end-line 654, :end-column 18, :arglists (quote ([a] [a b])), :doc "Returns true if two arrays have a conforming shape. Two arrays are conforming if there\n   exists a common shape that both can broadcast to. This is a requirement for element-wise\n   operations to work correctly on two different-shaped arrays.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([a] [a b]), :arglists ([a] [a b]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/conforming?, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([a] [a b]), :arglists ([a] [a b]), :arglists-meta (nil nil)}, :method-params ([a] [a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 654, :end-line 654, :max-fixed-arity 2, :fn-var true, :arglists ([a] [a b]), :doc "Returns true if two arrays have a conforming shape. Two arrays are conforming if there\n   exists a common shape that both can broadcast to. This is a requirement for element-wise\n   operations to work correctly on two different-shaped arrays."}, ecount {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 578, :column 7, :end-line 578, :end-column 13, :arglists (quote ([m])), :doc "Returns the total count of elements in an array, as an integer value.\n\n   Equal to the product of the lengths of each dimension in the array's shape.\n\n   Result will usually be a Long, however callers should note that for very large sparse arrays\n   the element count may be a BigInteger, i.e. equal to or larger than 2^63.\n\n   Returns 1 for a zero-dimensional array or scalar. "}, :name clojure.core.matrix/ecount, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 13, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 578, :end-line 578, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns the total count of elements in an array, as an integer value.\n\n   Equal to the product of the lengths of each dimension in the array's shape.\n\n   Result will usually be a Long, however callers should note that for very large sparse arrays\n   the element count may be a BigInteger, i.e. equal to or larger than 2^63.\n\n   Returns 1 for a zero-dimensional array or scalar. "}, fill {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1187, :column 7, :end-line 1187, :end-column 11, :arglists (quote ([m value])), :doc "Fills a matrix with a single scalar value. The scalar value must be compatible with the element-type\n   of the array. Returns a new array.\n\n   Functionally similar to `assign!` except only intended for use with a scalar value."}, :name clojure.core.matrix/fill, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 11, :method-params ([m value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1187, :end-line 1187, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m value])), :doc "Fills a matrix with a single scalar value. The scalar value must be compatible with the element-type\n   of the array. Returns a new array.\n\n   Functionally similar to `assign!` except only intended for use with a scalar value."}, set-row! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1958, :column 7, :end-line 1958, :end-column 15, :arglists (quote ([m i row])), :doc "Sets a row in a matrix in-place using a specified vector."}, :name clojure.core.matrix/set-row!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 15, :method-params ([m i row]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1958, :end-line 1958, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m i row])), :doc "Sets a row in a matrix in-place using a specified vector."}, pow {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1841, :column 7, :end-line 1841, :end-column 10, :arglists (quote ([m] [m exponent] [m exponent & more])), :doc "Raises every element of a numerical matrix by the given exponent.\n\n   Note that behaviour for large exponents may depend on the underlying implementation:\n   for example double-based matrices may overflow to Double/POSITIVE_INFINITY.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([m] [m exponent]), :arglists ([m] [m exponent] [m exponent & more]), :arglists-meta (nil nil nil)}}, :name clojure.core.matrix/pow, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([m] [m exponent]), :arglists ([m] [m exponent] [m exponent & more]), :arglists-meta (nil nil nil)}, :method-params ([m] [m exponent]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1841, :end-line 1841, :max-fixed-arity 2, :fn-var true, :arglists ([m] [m exponent] [m exponent & more]), :doc "Raises every element of a numerical matrix by the given exponent.\n\n   Note that behaviour for large exponents may depend on the underlying implementation:\n   for example double-based matrices may overflow to Double/POSITIVE_INFINITY."}, set-selection! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 894, :column 7, :end-line 894, :end-column 21, :arglists (quote ([a & args])), :doc "Like set-selection but mutates the array in place. Will throw an error if array is immutable.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(a args)], :arglists ([a & args]), :arglists-meta (nil)}}, :name clojure.core.matrix/set-selection!, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(a args)], :arglists ([a & args]), :arglists-meta (nil)}, :method-params [(a args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 894, :end-line 894, :max-fixed-arity 1, :fn-var true, :arglists ([a & args]), :doc "Like set-selection but mutates the array in place. Will throw an error if array is immutable."}, exp {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the exp function on all elements of an array, using double precision values. Returns a new array.", :file nil}, :name clojure.core.matrix/exp, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the exp function on all elements of an array, using double precision values. Returns a new array."}, mset! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([m v] [m x v] [m x y v] [m x y z v]), :arglists ([m v] [m x v] [m x y v] [m x y z v] [m x y z t & more]), :arglists-meta (nil nil nil nil nil)}, :inline-arities #{4 3 2}, :column 7, :line 778, :end-line 778, :arglists (quote ([m v] [m x v] [m x y v] [m x y z v] [m x y z t & more])), :doc "Mutates a scalar value in an array at the specified position. Supports any number of dimensions.\n\n   Will throw an exception if the matrix is not mutable at the specified position. Note that it\n   is possible for some arrays to be mutable in places and immutable in others (e.g. sparse arrays)\n\n   Returns the modified matrix (it is guaranteed to return the same instance)", :inline (fn ([m v] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote mp/set-0d!)) (clojure.core/list m) (clojure.core/list v))))) ([m x v] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote mp/set-1d!)) (clojure.core/list m) (clojure.core/list x) (clojure.core/list v))))) ([m x y v] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote mp/set-2d!)) (clojure.core/list m) (clojure.core/list x) (clojure.core/list y) (clojure.core/list v))))))}, :name clojure.core.matrix/mset!, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([m v] [m x v] [m x y v] [m x y z v]), :arglists ([m v] [m x v] [m x y v] [m x y z v] [m x y z t & more]), :arglists-meta (nil nil nil nil nil)}, :method-params ([m v] [m x v] [m x y v] [m x y z v]), :inline-arities #{4 3 2}, :protocol-impl nil, :arglists-meta (nil nil nil nil nil), :column 1, :line 778, :end-line 778, :max-fixed-arity 5, :fn-var true, :arglists ([m v] [m x v] [m x y v] [m x y z v] [m x y z t & more]), :doc "Mutates a scalar value in an array at the specified position. Supports any number of dimensions.\n\n   Will throw an exception if the matrix is not mutable at the specified position. Note that it\n   is possible for some arrays to be mutable in places and immutable in others (e.g. sparse arrays)\n\n   Returns the modified matrix (it is guaranteed to return the same instance)", :inline (fn ([m v] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote mp/set-0d!)) (clojure.core/list m) (clojure.core/list v))))) ([m x v] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote mp/set-1d!)) (clojure.core/list m) (clojure.core/list x) (clojure.core/list v))))) ([m x y v] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote mp/set-2d!)) (clojure.core/list m) (clojure.core/list x) (clojure.core/list y) (clojure.core/list v))))))}, fill! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1178, :column 7, :end-line 1178, :end-column 12, :arglists (quote ([m value])), :doc "Fills a matrix with a single scalar value. The scalar value must be compatible with the element-type\n   of the array.\n\n   Similar to assign!, but only supports scalar values (and may be more efficient)."}, :name clojure.core.matrix/fill!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 12, :method-params ([m value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1178, :end-line 1178, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m value])), :doc "Fills a matrix with a single scalar value. The scalar value must be compatible with the element-type\n   of the array.\n\n   Similar to assign!, but only supports scalar values (and may be more efficient)."}, matrix? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 468, :column 7, :end-line 468, :end-column 14, :arglists (quote ([m])), :doc "Returns true if parameter is a valid core.matrix matrix (i.e. an array with dimensionality == 2)"}, :name clojure.core.matrix/matrix?, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 14, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 468, :end-line 468, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns true if parameter is a valid core.matrix matrix (i.e. an array with dimensionality == 2)"}, length-squared {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1836, :column 27, :end-line 1836, :end-column 41, :deprecated true, :arglists (quote ([m])), :doc "DEPRECATED: please use magnitude-squared instead."}, :name clojure.core.matrix/length-squared, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 41, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1836, :deprecated true, :end-line 1836, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "DEPRECATED: please use magnitude-squared instead."}, emul {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1417, :column 27, :end-line 1417, :end-column 31, :deprecated true, :arglists (quote ([] [a] [a b] [a b & more])), :doc "DEPRECATED: please use mul instead.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [a] [a b]), :arglists ([] [a] [a b] [a b & more]), :arglists-meta (nil nil nil nil)}}, :name clojure.core.matrix/emul, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 31, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [a] [a b]), :arglists ([] [a] [a b] [a b & more]), :arglists-meta (nil nil nil nil)}, :method-params ([] [a] [a b]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 1417, :deprecated true, :end-line 1417, :max-fixed-arity 2, :fn-var true, :arglists ([] [a] [a b] [a b & more]), :doc "DEPRECATED: please use mul instead."}, emin {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 2048, :column 7, :end-line 2048, :end-column 11, :arglists (quote ([m])), :doc "Gets the minimum element value from a numerical array"}, :name clojure.core.matrix/emin, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 11, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2048, :end-line 2048, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Gets the minimum element value from a numerical array"}, add-scaled-product! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1608, :column 7, :end-line 1608, :end-column 26, :arglists (quote ([m a b factor])), :doc "Adds the product of two numerical arrays scaled by a given factor to the first array.\n   Returns the mutated array.\n   This is equivalent to (add! m (mul a b factor)) but may be optimised by the underlying implementation."}, :name clojure.core.matrix/add-scaled-product!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 26, :method-params ([m a b factor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1608, :end-line 1608, :max-fixed-arity 4, :fn-var true, :arglists (quote ([m a b factor])), :doc "Adds the product of two numerical arrays scaled by a given factor to the first array.\n   Returns the mutated array.\n   This is equivalent to (add! m (mul a b factor)) but may be optimised by the underlying implementation."}, add-product! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1551, :column 7, :end-line 1551, :end-column 19, :arglists (quote ([m a b])), :doc "Adds the product of two numerical arrays to the first array. Returns the mutated array."}, :name clojure.core.matrix/add-product!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 19, :method-params ([m a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1551, :end-line 1551, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m a b])), :doc "Adds the product of two numerical arrays to the first array. Returns the mutated array."}, conjoin-along {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1057, :column 7, :end-line 1057, :end-column 20, :arglists (quote ([dim a b] [dim a b & more])), :doc "Adds a new value [b] as a new slice to an array [a] along the given dimension,\n   returning the extended array.\n   Broadcasts the new value to the correct shape of a slice of a if necessary.\n\n   This can be considered as the array equivalent of clojure.core/conj using\n   a specified dimension", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([dim a b]), :arglists ([dim a b] [dim a b & more]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/conjoin-along, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([dim a b]), :arglists ([dim a b] [dim a b & more]), :arglists-meta (nil nil)}, :method-params ([dim a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1057, :end-line 1057, :max-fixed-arity 3, :fn-var true, :arglists ([dim a b] [dim a b & more]), :doc "Adds a new value [b] as a new slice to an array [a] along the given dimension,\n   returning the extended array.\n   Broadcasts the new value to the correct shape of a slice of a if necessary.\n\n   This can be considered as the array equivalent of clojure.core/conj using\n   a specified dimension"}, lower-triangular? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 518, :column 7, :end-line 518, :end-column 24, :arglists (quote ([m])), :doc "Returns true if the parameter is a lower triangular matrix."}, :name clojure.core.matrix/lower-triangular?, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 24, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 518, :end-line 518, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns true if the parameter is a lower triangular matrix."}, add-outer-product! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1627, :column 7, :end-line 1627, :end-column 25, :arglists (quote ([m a b] [m a b factor])), :doc "Adds the inner product of two numerical arrays to the first array.\n   Returns the mutated array.\n   This is equivalent to (add! m (outer-product a b)) but may be optimised by the underlying implementation.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([m a b] [m a b factor]), :arglists ([m a b] [m a b factor]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/add-outer-product!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([m a b] [m a b factor]), :arglists ([m a b] [m a b factor]), :arglists-meta (nil nil)}, :method-params ([m a b] [m a b factor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1627, :end-line 1627, :max-fixed-arity 4, :fn-var true, :arglists ([m a b] [m a b factor]), :doc "Adds the inner product of two numerical arrays to the first array.\n   Returns the mutated array.\n   This is equivalent to (add! m (outer-product a b)) but may be optimised by the underlying implementation."}, ereduce {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 2004, :column 7, :end-line 2004, :end-column 14, :arglists (quote ([f m] [f init m])), :doc "Element-wise reduce on all elements of an array.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f m] [f init m]), :arglists ([f m] [f init m]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/ereduce, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f m] [f init m]), :arglists ([f m] [f init m]), :arglists-meta (nil nil)}, :method-params ([f m] [f init m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2004, :end-line 2004, :max-fixed-arity 3, :fn-var true, :arglists ([f m] [f init m]), :doc "Element-wise reduce on all elements of an array."}, cosh {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the cosh function on all elements of an array, using double precision values. Returns a new array.", :file nil}, :name clojure.core.matrix/cosh, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the cosh function on all elements of an array, using double precision values. Returns a new array."}, scale-add! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1572, :column 7, :end-line 1572, :end-column 17, :arglists (quote ([m1 a m2 b] [m1 a m2 b constant])), :doc "Scales array m1 by factor a, then adds an array m2 scaled by factor b. May optionally add a constant.\n   Broadly equivalent to (add! (mul! m1 a) (mul m2 b) constant)\n\n   Returns the mutated array `m1`. The array `m2` will not be changed.", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([m1 a m2 b] [m1 a m2 b constant]), :arglists ([m1 a m2 b] [m1 a m2 b constant]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/scale-add!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([m1 a m2 b] [m1 a m2 b constant]), :arglists ([m1 a m2 b] [m1 a m2 b constant]), :arglists-meta (nil nil)}, :method-params ([m1 a m2 b] [m1 a m2 b constant]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1572, :end-line 1572, :max-fixed-arity 5, :fn-var true, :arglists ([m1 a m2 b] [m1 a m2 b constant]), :doc "Scales array m1 by factor a, then adds an array m2 scaled by factor b. May optionally add a constant.\n   Broadly equivalent to (add! (mul! m1 a) (mul m2 b) constant)\n\n   Returns the mutated array `m1`. The array `m2` will not be changed."}, div! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1456, :column 7, :end-line 1456, :end-column 11, :arglists (quote ([a] [a b] [a b & more])), :doc "Performs in-place element-wise matrix division for numerical arrays.\n\n   Computes the reciprocal of each element when passed a single argument (similar to clojure.core//).", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([a] [a b]), :arglists ([a] [a b] [a b & more]), :arglists-meta (nil nil nil)}}, :name clojure.core.matrix/div!, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([a] [a b]), :arglists ([a] [a b] [a b & more]), :arglists-meta (nil nil nil)}, :method-params ([a] [a b]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1456, :end-line 1456, :max-fixed-arity 2, :fn-var true, :arglists ([a] [a b] [a b & more]), :doc "Performs in-place element-wise matrix division for numerical arrays.\n\n   Computes the reciprocal of each element when passed a single argument (similar to clojure.core//)."}, upper-triangular? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 513, :column 7, :end-line 513, :end-column 24, :arglists (quote ([m])), :doc "Returns true if the parameter is a upper triangular matrix."}, :name clojure.core.matrix/upper-triangular?, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 24, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 513, :end-line 513, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns true if the parameter is a upper triangular matrix."}, native? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 367, :column 7, :end-line 367, :end-column 14, :arglists (quote ([a])), :doc "Returns true if the array is in a native format.\n\n   Native formats are implementation defined, and may use non-Java resources (e.g. GPU memory)."}, :name clojure.core.matrix/native?, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 14, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 367, :end-line 367, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "Returns true if the array is in a native format.\n\n   Native formats are implementation defined, and may use non-Java resources (e.g. GPU memory)."}, join-along {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1034, :column 7, :end-line 1034, :end-column 17, :arglists (quote ([dimension & arrays])), :doc "Joins arrays together, concatenating them along the specified dimension.\n\n   Other dimensions must be compatible.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(dimension arrays)], :arglists ([dimension & arrays]), :arglists-meta (nil)}}, :name clojure.core.matrix/join-along, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(dimension arrays)], :arglists ([dimension & arrays]), :arglists-meta (nil)}, :method-params [(dimension arrays)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1034, :end-line 1034, :max-fixed-arity 1, :fn-var true, :arglists ([dimension & arrays]), :doc "Joins arrays together, concatenating them along the specified dimension.\n\n   Other dimensions must be compatible."}, assign-array! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 412, :column 7, :end-line 412, :end-column 20, :arglists (quote ([m arr] [m arr offset])), :doc "Assigns values to a core.matrix array from a Java array, in element-wise order. Element type of Java array must be compatible.\n   Returns the mutated core.matrix array", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([m arr] [m arr offset]), :arglists ([m arr] [m arr offset]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/assign-array!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([m arr] [m arr offset]), :arglists ([m arr] [m arr offset]), :arglists-meta (nil nil)}, :method-params ([m arr] [m arr offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 412, :end-line 412, :max-fixed-arity 3, :fn-var true, :arglists ([m arr] [m arr offset]), :doc "Assigns values to a core.matrix array from a Java array, in element-wise order. Element type of Java array must be compatible.\n   Returns the mutated core.matrix array"}, broadcast-like {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1136, :column 7, :end-line 1136, :end-column 21, :arglists (quote ([m a])), :doc "Broadcasts the second matrix to the shape of the first. See 'broadcast'.", :inline (fn ([m a] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote mp/broadcast-like)) (clojure.core/list m) (clojure.core/list a))))))}, :name clojure.core.matrix/broadcast-like, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 21, :method-params ([m a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1136, :end-line 1136, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m a])), :doc "Broadcasts the second matrix to the shape of the first. See 'broadcast'.", :inline (fn ([m a] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote mp/broadcast-like)) (clojure.core/list m) (clojure.core/list a))))))}, sparse-array {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 308, :column 7, :end-line 308, :end-column 19, :arglists (quote ([data] [implementation data])), :doc "Creates a sparse array with the given data, using a specified implementation\n  or the current implementation if not specified.\n\n  Throws an exception if creation of a sparse array is not possible", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([data] [implementation data]), :arglists ([data] [implementation data]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/sparse-array, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([data] [implementation data]), :arglists ([data] [implementation data]), :arglists-meta (nil nil)}, :method-params ([data] [implementation data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 308, :end-line 308, :max-fixed-arity 2, :fn-var true, :arglists ([data] [implementation data]), :doc "Creates a sparse array with the given data, using a specified implementation\n  or the current implementation if not specified.\n\n  Throws an exception if creation of a sparse array is not possible"}, slice-count {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 571, :column 7, :end-line 571, :end-column 18, :arglists (quote ([m])), :doc "Returns the number of slices in an array (array must be 1D or more). The array is sliced\n   in row-major order, i.e. this is the dimension count of the first dimension.", :inline (fn ([m] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote clojure.core.matrix/dimension-count)) (clojure.core/list m) (clojure.core/list 0))))))}, :name clojure.core.matrix/slice-count, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 18, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 571, :end-line 571, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns the number of slices in an array (array must be 1D or more). The array is sliced\n   in row-major order, i.e. this is the dimension count of the first dimension.", :inline (fn ([m] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote clojure.core.matrix/dimension-count)) (clojure.core/list m) (clojure.core/list 0))))))}, outer-product {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1750, :column 7, :end-line 1750, :end-column 20, :arglists (quote ([] [a] [a b] [a b & more])), :doc "Computes the outer product of numerical arrays.\n\n   The outer product of two arrays with indexed dimensions {i..j} and {j..k} has dimensions {i..j j..k}, i.e. the dimensioanlity will be the\n   sum of the dimensionalities of the two arguments.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [a] [a b]), :arglists ([] [a] [a b] [a b & more]), :arglists-meta (nil nil nil nil)}}, :name clojure.core.matrix/outer-product, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [a] [a b]), :arglists ([] [a] [a b] [a b & more]), :arglists-meta (nil nil nil nil)}, :method-params ([] [a] [a b]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 1750, :end-line 1750, :max-fixed-arity 2, :fn-var true, :arglists ([] [a] [a b] [a b & more]), :doc "Computes the outer product of numerical arrays.\n\n   The outer product of two arrays with indexed dimensions {i..j} and {j..k} has dimensions {i..j j..k}, i.e. the dimensioanlity will be the\n   sum of the dimensionalities of the two arguments."}, array {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 59, :column 7, :end-line 59, :end-column 12, :arglists (quote ([data] [implementation data])), :doc "Constructs a new n-dimensional array from the given data.\n\n   This function will examine the data in order to construct an array of the appropriate shape.\n\n   The data may be in one of the following forms:\n   - A valid existing array (which will be converted to the implementation)\n   - Nested sequences of scalar values, e.g. Clojure vectors (must have regular shape)\n   - A sequence of slices, each of which must be valid array data\n   - A single scalar value, which will be wrapped or coerced as necessary for the implementation\n\n   If implementation is not specified, uses the current matrix library as specified\n   in *matrix-implementation*\n\n   If the implementation does not support the shape or type of data provided, may either\n   create an array using a different implementation on a best-efforts basis or\n   alternatively throw an error. This behaviour is implementation-specific.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([data] [implementation data]), :arglists ([data] [implementation data]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/array, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([data] [implementation data]), :arglists ([data] [implementation data]), :arglists-meta (nil nil)}, :method-params ([data] [implementation data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists ([data] [implementation data]), :doc "Constructs a new n-dimensional array from the given data.\n\n   This function will examine the data in order to construct an array of the appropriate shape.\n\n   The data may be in one of the following forms:\n   - A valid existing array (which will be converted to the implementation)\n   - Nested sequences of scalar values, e.g. Clojure vectors (must have regular shape)\n   - A sequence of slices, each of which must be valid array data\n   - A single scalar value, which will be wrapped or coerced as necessary for the implementation\n\n   If implementation is not specified, uses the current matrix library as specified\n   in *matrix-implementation*\n\n   If the implementation does not support the shape or type of data provided, may either\n   create an array using a different implementation on a best-efforts basis or\n   alternatively throw an error. This behaviour is implementation-specific."}, magnitude {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1821, :column 7, :end-line 1821, :end-column 16, :arglists (quote ([m])), :doc "Calculates the euclidean length (magnitude) of a numerical vector"}, :name clojure.core.matrix/magnitude, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 16, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1821, :end-line 1821, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Calculates the euclidean length (magnitude) of a numerical vector"}, slices {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 956, :column 7, :end-line 956, :end-column 13, :arglists (quote ([m] [m dimension])), :doc "Gets a sequence of slices of an array. If dimension is supplied, slices along a given dimension,\n   otherwise slices along the first dimension.\n\n   Returns a sequence of scalar values if the array is 1-dimensional.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([m] [m dimension]), :arglists ([m] [m dimension]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/slices, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([m] [m dimension]), :arglists ([m] [m dimension]), :arglists-meta (nil nil)}, :method-params ([m] [m dimension]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 956, :end-line 956, :max-fixed-arity 2, :fn-var true, :arglists ([m] [m dimension]), :doc "Gets a sequence of slices of an array. If dimension is supplied, slices along a given dimension,\n   otherwise slices along the first dimension.\n\n   Returns a sequence of scalar values if the array is 1-dimensional."}, equals {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1199, :column 7, :end-line 1199, :end-column 13, :arglists (quote ([a] [a b] [a b epsilon])), :doc "Returns true if two arrays are numerically equal.\n\n   Will return false for arrays of different shapes.\n\n   May either return false or throw an error if the arrays are not numerical.\n\n   If epsilon is provided, performs an equality test\n   with the given maximum tolerance (default is 0.0, i.e. exact numerical equivalence)", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([a] [a b] [a b epsilon]), :arglists ([a] [a b] [a b epsilon]), :arglists-meta (nil nil nil)}}, :name clojure.core.matrix/equals, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([a] [a b] [a b epsilon]), :arglists ([a] [a b] [a b epsilon]), :arglists-meta (nil nil nil)}, :method-params ([a] [a b] [a b epsilon]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1199, :end-line 1199, :max-fixed-arity 3, :fn-var true, :arglists ([a] [a b] [a b epsilon]), :doc "Returns true if two arrays are numerically equal.\n\n   Will return false for arrays of different shapes.\n\n   May either return false or throw an error if the arrays are not numerical.\n\n   If epsilon is provided, performs an equality test\n   with the given maximum tolerance (default is 0.0, i.e. exact numerical equivalence)"}, row-matrix {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 209, :column 7, :end-line 209, :end-column 17, :arglists (quote ([data] [implementation data])), :doc "Constructs a row matrix with the given data. The returned matrix is a 2D 1xN row matrix.\n\n   The data must be either a valid existing vector or a sequence of scalar values.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([data] [implementation data]), :arglists ([data] [implementation data]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/row-matrix, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([data] [implementation data]), :arglists ([data] [implementation data]), :arglists-meta (nil nil)}, :method-params ([data] [implementation data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 209, :end-line 209, :max-fixed-arity 2, :fn-var true, :arglists ([data] [implementation data]), :doc "Constructs a row matrix with the given data. The returned matrix is a 2D 1xN row matrix.\n\n   The data must be either a valid existing vector or a sequence of scalar values."}, esum {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 2043, :column 7, :end-line 2043, :end-column 11, :arglists (quote ([m])), :doc "Calculates the sum of all the elements in a numerical array."}, :name clojure.core.matrix/esum, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 11, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2043, :end-line 2043, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Calculates the sum of all the elements in a numerical array."}, round! {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the round function on all elements of an array, using double precision values. Mutates the array in-place.", :file nil}, :name clojure.core.matrix/round!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the round function on all elements of an array, using double precision values. Mutates the array in-place."}, symmetric? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 503, :column 7, :end-line 503, :end-column 17, :arglists (quote ([m])), :doc "Returns true if the parameter is a symmetric matrix, i.e. Aij = Aji for all i,j."}, :name clojure.core.matrix/symmetric?, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 17, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 503, :end-line 503, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns true if the parameter is a symmetric matrix, i.e. Aij = Aji for all i,j."}, asin {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the asin function on all elements of an array, using double precision values. Returns a new array.", :file nil}, :name clojure.core.matrix/asin, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the asin function on all elements of an array, using double precision values. Returns a new array."}, lerp {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1583, :column 7, :end-line 1583, :end-column 11, :arglists (quote ([a b factor])), :doc "Performs linear interpolation between two arrays. If factor is 0.0, result will be equal to the first vector.\n   If factor is 1.0, result will be equal to the second vector. Returns a new array."}, :name clojure.core.matrix/lerp, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 11, :method-params ([a b factor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1583, :end-line 1583, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a b factor])), :doc "Performs linear interpolation between two arrays. If factor is 0.0, result will be equal to the first vector.\n   If factor is 1.0, result will be equal to the second vector. Returns a new array."}, select-view {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 876, :column 7, :end-line 876, :end-column 18, :arglists (quote ([a & args])), :doc "Like `select`, but guarantees a view over the original data.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(a args)], :arglists ([a & args]), :arglists-meta (nil)}}, :name clojure.core.matrix/select-view, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(a args)], :arglists ([a & args]), :arglists-meta (nil)}, :method-params [(a args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 876, :end-line 876, :max-fixed-arity 1, :fn-var true, :arglists ([a & args]), :doc "Like `select`, but guarantees a view over the original data."}, rows {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 989, :column 7, :end-line 989, :end-column 11, :arglists (quote ([m])), :doc "Gets the rows of a matrix, as a sequence of 1D vectors.\n\n   If the array has more than 2 dimensions, will return the rows from all slices in order."}, :name clojure.core.matrix/rows, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 11, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 989, :end-line 989, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Gets the rows of a matrix, as a sequence of 1D vectors.\n\n   If the array has more than 2 dimensions, will return the rows from all slices in order."}, matrix {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 85, :column 7, :end-line 85, :end-column 13, :arglists (quote ([data] [implementation data])), :doc "Constructs a new 2-dimensional matrix from the given numerical data.\n\n   The data may be in one of the following forms:\n   - A valid existing numerical array\n   - Nested sequences of scalar values, e.g. Clojure vectors\n   - A sequence of slices, each of which must be valid matrix data\n\n   If implementation is not specified, uses the current matrix library as specified\n   in *matrix-implementation*\n\n   `matrix` works as a synonym for `array`", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([data] [implementation data]), :arglists ([data] [implementation data]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/matrix, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([data] [implementation data]), :arglists ([data] [implementation data]), :arglists-meta (nil nil)}, :method-params ([data] [implementation data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 2, :fn-var true, :arglists ([data] [implementation data]), :doc "Constructs a new 2-dimensional matrix from the given numerical data.\n\n   The data may be in one of the following forms:\n   - A valid existing numerical array\n   - Nested sequences of scalar values, e.g. Clojure vectors\n   - A sequence of slices, each of which must be valid matrix data\n\n   If implementation is not specified, uses the current matrix library as specified\n   in *matrix-implementation*\n\n   `matrix` works as a synonym for `array`"}, div {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1448, :column 7, :end-line 1448, :end-column 10, :arglists (quote ([a] [a b] [a b & more])), :doc "Performs element-wise matrix division for numerical arrays.\n\n   Computes the reciprocal of each element when passed a single argument (similar to clojure.core//).", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([a] [a b]), :arglists ([a] [a b] [a b & more]), :arglists-meta (nil nil nil)}}, :name clojure.core.matrix/div, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([a] [a b]), :arglists ([a] [a b] [a b & more]), :arglists-meta (nil nil nil)}, :method-params ([a] [a b]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1448, :end-line 1448, :max-fixed-arity 2, :fn-var true, :arglists ([a] [a b] [a b & more]), :doc "Performs element-wise matrix division for numerical arrays.\n\n   Computes the reciprocal of each element when passed a single argument (similar to clojure.core//)."}, mul! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1472, :column 7, :end-line 1472, :end-column 11, :arglists (quote ([a] [a b] [a b & more])), :doc "Performs in-place element-wise multiplication of numerical arrays.\n\n   Returns the first argument after mutation.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([a] [a b]), :arglists ([a] [a b] [a b & more]), :arglists-meta (nil nil nil)}}, :name clojure.core.matrix/mul!, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([a] [a b]), :arglists ([a] [a b] [a b & more]), :arglists-meta (nil nil nil)}, :method-params ([a] [a b]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1472, :end-line 1472, :max-fixed-arity 2, :fn-var true, :arglists ([a] [a b] [a b & more]), :doc "Performs in-place element-wise multiplication of numerical arrays.\n\n   Returns the first argument after mutation."}, signum! {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the signum function on all elements of an array, using double precision values. Mutates the array in-place.", :file nil}, :name clojure.core.matrix/signum!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the signum function on all elements of an array, using double precision values. Mutates the array in-place."}, scale-add {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1562, :column 7, :end-line 1562, :end-column 16, :arglists (quote ([m1 a m2 b] [m1 a m2 b constant])), :doc "Scales array m1 by factor a, then adds an array m2 scaled by factor b. May optionally add a constant.\n   Broadly equivalent to (add (mul m1 a) (mul m2 b) constant)\n\n   Returns a new array.", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([m1 a m2 b] [m1 a m2 b constant]), :arglists ([m1 a m2 b] [m1 a m2 b constant]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/scale-add, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([m1 a m2 b] [m1 a m2 b constant]), :arglists ([m1 a m2 b] [m1 a m2 b constant]), :arglists-meta (nil nil)}, :method-params ([m1 a m2 b] [m1 a m2 b constant]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1562, :end-line 1562, :max-fixed-arity 5, :fn-var true, :arglists ([m1 a m2 b] [m1 a m2 b constant]), :doc "Scales array m1 by factor a, then adds an array m2 scaled by factor b. May optionally add a constant.\n   Broadly equivalent to (add (mul m1 a) (mul m2 b) constant)\n\n   Returns a new array."}, add-product {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1545, :column 7, :end-line 1545, :end-column 18, :arglists (quote ([m a b])), :doc "Adds the element-wise product of two numerical arrays to the first array.\n   Arrays should be the same shape."}, :name clojure.core.matrix/add-product, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 18, :method-params ([m a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1545, :end-line 1545, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m a b])), :doc "Adds the element-wise product of two numerical arrays to the first array.\n   Arrays should be the same shape."}, round {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the round function on all elements of an array, using double precision values. Returns a new array.", :file nil}, :name clojure.core.matrix/round, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the round function on all elements of an array, using double precision values. Returns a new array."}, normalise-args {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 850, :column 8, :end-line 850, :end-column 22, :private true, :arglists (quote ([args m])), :doc "Normalises arguments by mapping :all to the complete range"}, :private true, :name clojure.core.matrix/normalise-args, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 22, :method-params ([args m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 850, :end-line 850, :max-fixed-arity 2, :fn-var true, :arglists (quote ([args m])), :doc "Normalises arguments by mapping :all to the complete range"}, normalise {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1706, :column 7, :end-line 1706, :end-column 16, :arglists (quote ([v])), :doc "Normalises a numerical vector (scales to unit length). Returns a new normalised vector.\n\n   The result is undefined if the initial length of the vector is zero (it is possible the\n   implementation may return NaNs or zeros). If this is a concern, it is recommended to check\n   the length of the vector first in order to handle this as a special case."}, :name clojure.core.matrix/normalise, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 16, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1706, :end-line 1706, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Normalises a numerical vector (scales to unit length). Returns a new normalised vector.\n\n   The result is undefined if the initial length of the vector is zero (it is possible the\n   implementation may return NaNs or zeros). If this is a concern, it is recommended to check\n   the length of the vector first in order to handle this as a special case."}, emap {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 2011, :column 7, :end-line 2011, :end-column 11, :arglists (quote ([f m] [f m a] [f m a & more])), :doc "Element-wise map over all elements of one or more arrays.\n\n   f must return a result compatible with the element-type of the array m\n\n   Returns a new array of the same element-type and shape as the array m.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([f m] [f m a]), :arglists ([f m] [f m a] [f m a & more]), :arglists-meta (nil nil nil)}}, :name clojure.core.matrix/emap, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([f m] [f m a]), :arglists ([f m] [f m a] [f m a & more]), :arglists-meta (nil nil nil)}, :method-params ([f m] [f m a]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 2011, :end-line 2011, :max-fixed-arity 3, :fn-var true, :arglists ([f m] [f m a] [f m a & more]), :doc "Element-wise map over all elements of one or more arrays.\n\n   f must return a result compatible with the element-type of the array m\n\n   Returns a new array of the same element-type and shape as the array m."}, acos! {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the acos function on all elements of an array, using double precision values. Mutates the array in-place.", :file nil}, :name clojure.core.matrix/acos!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the acos function on all elements of an array, using double precision values. Mutates the array in-place."}, select-indices {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 886, :column 7, :end-line 886, :end-column 21, :arglists (quote ([a indices])), :doc "Returns a one-dimensional array of the elements which are at the specified\n   indices. An index is a one-dimensional array which element-count matches the\n   dimensionality of a. Examples:\n   (select-indices [[1 2] [3 4]] [[0 0][1 1]]) ;=> [1 4]"}, :name clojure.core.matrix/select-indices, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 21, :method-params ([a indices]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 886, :end-line 886, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a indices])), :doc "Returns a one-dimensional array of the elements which are at the specified\n   indices. An index is a one-dimensional array which element-count matches the\n   dimensionality of a. Examples:\n   (select-indices [[1 2] [3 4]] [[0 0][1 1]]) ;=> [1 4]"}, assign! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 405, :column 7, :end-line 405, :end-column 14, :arglists (quote ([m a])), :doc "Assigns a new value to an array. Sets the values of the target element-wise, broadcasting where necessary.\n   Returns the mutated array. The new value may be either a scalar or a array of compatible (maybe smaller) shape."}, :name clojure.core.matrix/assign!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 14, :method-params ([m a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 405, :end-line 405, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m a])), :doc "Assigns a new value to an array. Sets the values of the target element-wise, broadcasting where necessary.\n   Returns the mutated array. The new value may be either a scalar or a array of compatible (maybe smaller) shape."}, get-row {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 806, :column 7, :end-line 806, :end-column 14, :arglists (quote ([m x])), :doc "Gets a row of a matrix, as a 1D vector.\n\n   May return a mutable view if supported by the implementation."}, :name clojure.core.matrix/get-row, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 14, :method-params ([m x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 806, :end-line 806, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m x])), :doc "Gets a row of a matrix, as a 1D vector.\n\n   May return a mutable view if supported by the implementation."}, mul {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1403, :column 7, :end-line 1403, :end-column 10, :arglists (quote ([] [a] [a b] [a b & more])), :doc "Performs element-wise multiplication with scalars and numerical arrays.\n\n   Behaves like clojure.core/* for scalar values.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [a] [a b]), :arglists ([] [a] [a b] [a b & more]), :arglists-meta (nil nil nil nil)}}, :name clojure.core.matrix/mul, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [a] [a b]), :arglists ([] [a] [a b] [a b & more]), :arglists-meta (nil nil nil nil)}, :method-params ([] [a] [a b]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 1403, :end-line 1403, :max-fixed-arity 2, :fn-var true, :arglists ([] [a] [a b] [a b & more]), :doc "Performs element-wise multiplication with scalars and numerical arrays.\n\n   Behaves like clojure.core/* for scalar values."}, sinh! {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the sinh function on all elements of an array, using double precision values. Mutates the array in-place.", :file nil}, :name clojure.core.matrix/sinh!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the sinh function on all elements of an array, using double precision values. Mutates the array in-place."}, native {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 357, :column 7, :end-line 357, :end-column 13, :arglists (quote ([a] [impl a])), :doc "Coerces an array into a native format array if possible. Native arrays may offer\n   superior performance for some operations, depending on the implementation.\n   Returns nil if no appropriate native format exists.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([a] [impl a]), :arglists ([a] [impl a]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/native, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([a] [impl a]), :arglists ([a] [impl a]), :arglists-meta (nil nil)}, :method-params ([a] [impl a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 357, :end-line 357, :max-fixed-arity 2, :fn-var true, :arglists ([a] [impl a]), :doc "Coerces an array into a native format array if possible. Native arrays may offer\n   superior performance for some operations, depending on the implementation.\n   Returns nil if no appropriate native format exists."}, logistic! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1892, :column 7, :end-line 1892, :end-column 16, :arglists (quote ([a])), :doc "Computes the sigmoid (logistic) function for every element of an array. Mutates the array."}, :name clojure.core.matrix/logistic!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 16, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1892, :end-line 1892, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "Computes the sigmoid (logistic) function for every element of an array. Mutates the array."}, eif {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1230, :column 7, :end-line 1230, :end-column 10, :arglists (quote ([m a b])), :doc "Element-wise if. Tranverses each element, x, of an array, m. If x > 0,\n  returns a (if a is a scalar) or the corresponding element from a (if a is an\n  array or matrix). If x <= 0, returns b (if b is a scalar) or the corresponding\n  element from array b (if b is an array or matrix).\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (eif (lt 1 3) 3 6) ;=> 3\n  (eif (lt 5 3) 3 6) ;=> 6\n  (eif (eq A B) 1 2) ;=> [[1 2] [2 1]]\n  (eif (eq A B) 1 D) ;=> [[1 1] [9 1]]\n  (eif (eq A B) C 2) ;=> [[2 2] [2 2]]\n  (eif [[1 0][0 1] [[2 3][4 5]] [[6 7][8 9]]) ;=> [[2 7][8 5]]\n  (eif (gt [[2 6][3 5]] 4) [[0 0][0 0]] [[1 1][1 1]] ;=> [[0 1][0 1]]"}, :name clojure.core.matrix/eif, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 10, :method-params ([m a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1230, :end-line 1230, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m a b])), :doc "Element-wise if. Tranverses each element, x, of an array, m. If x > 0,\n  returns a (if a is a scalar) or the corresponding element from a (if a is an\n  array or matrix). If x <= 0, returns b (if b is a scalar) or the corresponding\n  element from array b (if b is an array or matrix).\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (eif (lt 1 3) 3 6) ;=> 3\n  (eif (lt 5 3) 3 6) ;=> 6\n  (eif (eq A B) 1 2) ;=> [[1 2] [2 1]]\n  (eif (eq A B) 1 D) ;=> [[1 1] [9 1]]\n  (eif (eq A B) C 2) ;=> [[2 2] [2 2]]\n  (eif [[1 0][0 1] [[2 3][4 5]] [[6 7][8 9]]) ;=> [[2 7][8 5]]\n  (eif (gt [[2 6][3 5]] 4) [[0 0][0 0]] [[1 1][1 1]] ;=> [[0 1][0 1]]"}, row-matrix? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 597, :column 7, :end-line 597, :end-column 18, :arglists (quote ([m])), :doc "Returns true if a matrix is a row-matrix (i.e. is 2D and has exactly one row)"}, :name clojure.core.matrix/row-matrix?, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 18, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 597, :end-line 597, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns true if a matrix is a row-matrix (i.e. is 2D and has exactly one row)"}, assign {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 422, :column 7, :end-line 422, :end-column 13, :arglists (quote ([m a])), :doc "Assigns array a element-wise, broadcasting to fill the whole shape of m.\n   Returns a new matrix, of the same shape as the original m."}, :name clojure.core.matrix/assign, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 13, :method-params ([m a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 422, :end-line 422, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m a])), :doc "Assigns array a element-wise, broadcasting to fill the whole shape of m.\n   Returns a new matrix, of the same shape as the original m."}, tanh! {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the tanh function on all elements of an array, using double precision values. Mutates the array in-place.", :file nil}, :name clojure.core.matrix/tanh!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the tanh function on all elements of an array, using double precision values. Mutates the array in-place."}, main-diagonal {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1003, :column 7, :end-line 1003, :end-column 20, :arglists (quote ([m])), :doc "Returns the main diagonal of a matrix or general array, as a vector.\n   The main diagonal of a general array is defined as those elements where the all the\n   indexes are equal, i.e. the index is of the form [i i ... i]\n   Works on both square and rectangular matrices."}, :name clojure.core.matrix/main-diagonal, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 20, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1003, :end-line 1003, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns the main diagonal of a matrix or general array, as a vector.\n   The main diagonal of a general array is defined as those elements where the all the\n   indexes are equal, i.e. the index is of the form [i i ... i]\n   Works on both square and rectangular matrices."}, cross! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1769, :column 7, :end-line 1769, :end-column 13, :arglists (quote ([a b] [dest a b])), :doc "Computes the cross-product of two numerical 3D vectors a and b, storing the result in the first vector.\n\n   Returns the (mutated) first vector.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([a b] [dest a b]), :arglists ([a b] [dest a b]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/cross!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([a b] [dest a b]), :arglists ([a b] [dest a b]), :arglists-meta (nil nil)}, :method-params ([a b] [dest a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1769, :end-line 1769, :max-fixed-arity 3, :fn-var true, :arglists ([a b] [dest a b]), :doc "Computes the cross-product of two numerical 3D vectors a and b, storing the result in the first vector.\n\n   Returns the (mutated) first vector."}, abs {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the abs function on all elements of an array, using double precision values. Returns a new array.", :file nil}, :name clojure.core.matrix/abs, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the abs function on all elements of an array, using double precision values. Returns a new array."}, new-sparse-array {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 183, :column 7, :end-line 183, :end-column 23, :arglists (quote ([shape] [implementation shape])), :doc "Creates a new sparse array with the given shape.\n   New array will contain default values as defined by the implementation (usually zero).\n   If the implementation supports mutable sparse matrices, then the new matrix should be fully mutable.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([shape] [implementation shape]), :arglists ([shape] [implementation shape]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/new-sparse-array, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([shape] [implementation shape]), :arglists ([shape] [implementation shape]), :arglists-meta (nil nil)}, :method-params ([shape] [implementation shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 183, :end-line 183, :max-fixed-arity 2, :fn-var true, :arglists ([shape] [implementation shape]), :doc "Creates a new sparse array with the given shape.\n   New array will contain default values as defined by the implementation (usually zero).\n   If the implementation supports mutable sparse matrices, then the new matrix should be fully mutable."}, sinh {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the sinh function on all elements of an array, using double precision values. Returns a new array.", :file nil}, :name clojure.core.matrix/sinh, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the sinh function on all elements of an array, using double precision values. Returns a new array."}, to-nested-vectors {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 444, :column 7, :end-line 444, :end-column 24, :arglists (quote ([m])), :doc "Converts an array to an idiomatic, immutable nested Clojure vector format. The bottom level of the\n   nested vectors will contain the element values. Higher levels will all implement IPersistentVector.\n\n   The depth of nesting will be equal to the dimensionality of the array."}, :name clojure.core.matrix/to-nested-vectors, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 24, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 444, :end-line 444, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Converts an array to an idiomatic, immutable nested Clojure vector format. The bottom level of the\n   nested vectors will contain the element values. Higher levels will all implement IPersistentVector.\n\n   The depth of nesting will be equal to the dimensionality of the array."}, scalar {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 452, :column 7, :end-line 452, :end-column 13, :arglists (quote ([m])), :doc "Coerces m to a scalar value. Result is guaranteed not to be an array.\n   Will throw an exception if m is not zero-dimensional.", :inline (fn [m] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote mp/get-0d)) (clojure.core/list m)))))}, :name clojure.core.matrix/scalar, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 13, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 452, :end-line 452, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Coerces m to a scalar value. Result is guaranteed not to be an array.\n   Will throw an exception if m is not zero-dimensional.", :inline (fn [m] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote mp/get-0d)) (clojure.core/list m)))))}, label {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1383, :column 7, :end-line 1383, :end-column 12, :arglists (quote ([m dim i])), :doc "Returns a label for the specified position along a given array dimension. Returns nil if the dimension is unlabelled."}, :name clojure.core.matrix/label, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 12, :method-params ([m dim i]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1383, :end-line 1383, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m dim i])), :doc "Returns a label for the specified position along a given array dimension. Returns nil if the dimension is unlabelled."}, class {:name clojure.core.matrix/class, :file "resources/public/js/clojure/core/matrix.cljc", :line 46, :column 7, :end-line 46, :end-column 17, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 46, :column 12, :end-line 46, :end-column 17}}, implementation-check {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 2129, :column 8, :end-line 2129, :end-column 28, :private true, :arglists (quote ([] [impl])), :doc "Gets a canonical matrix object for a given implementation (keyword or array), or the current implementation\n   if not otherwise specified. Scalars are regarded as conforming to the current implementation\n   Throws an exception if none is available.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [impl]), :arglists ([] [impl]), :arglists-meta (nil nil)}}, :private true, :name clojure.core.matrix/implementation-check, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 28, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [impl]), :arglists ([] [impl]), :arglists-meta (nil nil)}, :method-params ([] [impl]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2129, :end-line 2129, :max-fixed-arity 1, :fn-var true, :arglists ([] [impl]), :doc "Gets a canonical matrix object for a given implementation (keyword or array), or the current implementation\n   if not otherwise specified. Scalars are regarded as conforming to the current implementation\n   Throws an exception if none is available."}, broadcast-coerce {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1142, :column 7, :end-line 1142, :end-column 23, :arglists (quote ([m a])), :doc "Broadcasts and coerces the second matrix to the shape and type of the first.\n   Equivalent to (coerce m (broadcast-like m a)).", :inline (fn ([m a] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote mp/broadcast-coerce)) (clojure.core/list m) (clojure.core/list a))))))}, :name clojure.core.matrix/broadcast-coerce, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 23, :method-params ([m a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1142, :end-line 1142, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m a])), :doc "Broadcasts and coerces the second matrix to the shape and type of the first.\n   Equivalent to (coerce m (broadcast-like m a)).", :inline (fn ([m a] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote mp/broadcast-coerce)) (clojure.core/list m) (clojure.core/list a))))))}, same-shape? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 663, :column 7, :end-line 663, :end-column 18, :arglists (quote ([] [m] [m n] [m n & more])), :doc "Returns true if the arrays have the same shape, false otherwise", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [m] [m n]), :arglists ([] [m] [m n] [m n & more]), :arglists-meta (nil nil nil nil)}}, :name clojure.core.matrix/same-shape?, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [m] [m n]), :arglists ([] [m] [m n] [m n & more]), :arglists-meta (nil nil nil nil)}, :method-params ([] [m] [m n]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 663, :end-line 663, :max-fixed-arity 2, :fn-var true, :arglists ([] [m] [m n] [m n & more]), :doc "Returns true if the arrays have the same shape, false otherwise"}, array? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 462, :column 7, :end-line 462, :end-column 13, :arglists (quote ([m])), :doc "Returns true if the parameter is a valid core.matrix N-dimensional array, for any N>=0.", :inline (fn [m] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote cljs.core/not)) (clojure.core/list (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote mp/is-scalar?)) (clojure.core/list m)))))))))}, :name clojure.core.matrix/array?, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 13, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 462, :end-line 462, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns true if the parameter is a valid core.matrix N-dimensional array, for any N>=0.", :inline (fn [m] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote cljs.core/not)) (clojure.core/list (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote mp/is-scalar?)) (clojure.core/list m)))))))))}, gt {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1287, :column 7, :end-line 1287, :end-column 9, :arglists (quote ([m a] [m a & more])), :doc "Element-wise greater-than comparison operation. Returns a binary array where\n  elements greater-than the argument are represented by 1 and elements less-\n  than or equal to the argument are 0.\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (gt 4 3) ;=> 1\n  (gt 3 3) ;=> 0\n  (gt [[1 5] [3 6]] 3) ;=> [[0 1] [0 1]]\n  (gt [[1 5] [4 6]] [[2 3] [5 6]]) ;=> [[0 1] [0 0]]", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([m a]), :arglists ([m a] [m a & more]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/gt, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 9, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([m a]), :arglists ([m a] [m a & more]), :arglists-meta (nil nil)}, :method-params ([m a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1287, :end-line 1287, :max-fixed-arity 2, :fn-var true, :arglists ([m a] [m a & more]), :doc "Element-wise greater-than comparison operation. Returns a binary array where\n  elements greater-than the argument are represented by 1 and elements less-\n  than or equal to the argument are 0.\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (gt 4 3) ;=> 1\n  (gt 3 3) ;=> 0\n  (gt [[1 5] [3 6]] 3) ;=> [[0 1] [0 1]]\n  (gt [[1 5] [4 6]] [[2 3] [5 6]]) ;=> [[0 1] [0 0]]"}, clone {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 428, :column 7, :end-line 428, :end-column 12, :arglists (quote ([m])), :doc "Constructs a (shallow) clone of the array. This function is intended to\n   allow safe defensive usage of matrices / vectors. If the intent is to create a mutable clone of\n   some array data, it is recommended to use mutable instead.\n\n   Guarantees that:\n   1. Mutating the returned array will not modify any other array (defensive copy)\n   2. The returned array will be fully mutable, if the implementation supports mutable matrices.\n\n   The clone may or may not be of the same implementation: implementations are encouraged to do so but\n   this is not mandatory.\n\n   A core.matrix implementation which only provides immutable arrays may safely return the same array."}, :name clojure.core.matrix/clone, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 12, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 428, :end-line 428, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Constructs a (shallow) clone of the array. This function is intended to\n   allow safe defensive usage of matrices / vectors. If the intent is to create a mutable clone of\n   some array data, it is recommended to use mutable instead.\n\n   Guarantees that:\n   1. Mutating the returned array will not modify any other array (defensive copy)\n   2. The returned array will be fully mutable, if the implementation supports mutable matrices.\n\n   The clone may or may not be of the same implementation: implementations are encouraged to do so but\n   this is not mandatory.\n\n   A core.matrix implementation which only provides immutable arrays may safely return the same array."}, to-object-array {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 703, :column 7, :end-line 703, :end-column 22, :arglists (quote ([m] [m want-copy?])), :doc "Returns a Java Object[] array containing the values of an array m in row-major order.\n\n    If want-copy? is true, will guarantee a new Object array (defensive copy).\n    If want-copy? is false, will return the internal array used by m, or nil if not supported\n    by the implementation.\n    If want-copy? is not specified, will return either a copy or the internal array", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([m] [m want-copy?]), :arglists ([m] [m want-copy?]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/to-object-array, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([m] [m want-copy?]), :arglists ([m] [m want-copy?]), :arglists-meta (nil nil)}, :method-params ([m] [m want-copy?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 703, :end-line 703, :max-fixed-arity 2, :fn-var true, :arglists ([m] [m want-copy?]), :doc "Returns a Java Object[] array containing the values of an array m in row-major order.\n\n    If want-copy? is true, will guarantee a new Object array (defensive copy).\n    If want-copy? is false, will return the internal array used by m, or nil if not supported\n    by the implementation.\n    If want-copy? is not specified, will return either a copy or the internal array"}, row-count {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 559, :column 7, :end-line 559, :end-column 16, :arglists (quote ([m])), :doc "Returns the number of rows in a matrix or vector (array must be 1D or more).", :inline (fn ([m] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote clojure.core.matrix/dimension-count)) (clojure.core/list m) (clojure.core/list 0))))))}, :name clojure.core.matrix/row-count, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 16, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 559, :end-line 559, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns the number of rows in a matrix or vector (array must be 1D or more).", :inline (fn ([m] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote clojure.core.matrix/dimension-count)) (clojure.core/list m) (clojure.core/list 0))))))}, slice {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 942, :column 7, :end-line 942, :end-column 12, :arglists (quote ([m index] [m dimension index])), :doc "Gets a slice of an array along a specific dimension.\n   The returned array will have one less dimension.\n\n   Slicing a 1D vector will return a scalar.\n\n   Slicing on the first dimension (dimension 0) is likely to perform better\n   for many array implementations, and is therefore the default if no\n   dimension is specified.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([m index] [m dimension index]), :arglists ([m index] [m dimension index]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/slice, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([m index] [m dimension index]), :arglists ([m index] [m dimension index]), :arglists-meta (nil nil)}, :method-params ([m index] [m dimension index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 942, :end-line 942, :max-fixed-arity 3, :fn-var true, :arglists ([m index] [m dimension index]), :doc "Gets a slice of an array along a specific dimension.\n   The returned array will have one less dimension.\n\n   Slicing a 1D vector will return a scalar.\n\n   Slicing on the first dimension (dimension 0) is likely to perform better\n   for many array implementations, and is therefore the default if no\n   dimension is specified."}, permutation-matrix {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 238, :column 7, :end-line 238, :end-column 25, :arglists (quote ([permutation] [implementation permutation])), :doc "Constructs a permutation matrix for a given permutation vector. The permutation vector should\n   contain a distinct set of integers 0...n-1, representing the re-ordering performed by\n   the permutation matrix.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([permutation] [implementation permutation]), :arglists ([permutation] [implementation permutation]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/permutation-matrix, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([permutation] [implementation permutation]), :arglists ([permutation] [implementation permutation]), :arglists-meta (nil nil)}, :method-params ([permutation] [implementation permutation]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 238, :end-line 238, :max-fixed-arity 2, :fn-var true, :arglists ([permutation] [implementation permutation]), :doc "Constructs a permutation matrix for a given permutation vector. The permutation vector should\n   contain a distinct set of integers 0...n-1, representing the re-ordering performed by\n   the permutation matrix."}, floor! {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the floor function on all elements of an array, using double precision values. Mutates the array in-place.", :file nil}, :name clojure.core.matrix/floor!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the floor function on all elements of an array, using double precision values. Mutates the array in-place."}, new-array {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 171, :column 7, :end-line 171, :end-column 16, :arglists (quote ([shape] [implementation shape])), :doc "Creates a new array with the given shape.\n   New array will contain default values as defined by the implementation (usually null or zero).\n   If the implementation supports mutable matrices, then the new matrix will be fully mutable.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([shape] [implementation shape]), :arglists ([shape] [implementation shape]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/new-array, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([shape] [implementation shape]), :arglists ([shape] [implementation shape]), :arglists-meta (nil nil)}, :method-params ([shape] [implementation shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 171, :end-line 171, :max-fixed-arity 2, :fn-var true, :arglists ([shape] [implementation shape]), :doc "Creates a new array with the given shape.\n   New array will contain default values as defined by the implementation (usually null or zero).\n   If the implementation supports mutable matrices, then the new matrix will be fully mutable."}, square {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1701, :column 7, :end-line 1701, :end-column 13, :arglists (quote ([m])), :doc "Squares every element of a numerical array. Returns a new array."}, :name clojure.core.matrix/square, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 13, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1701, :end-line 1701, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Squares every element of a numerical array. Returns a new array."}, compute-matrix {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 299, :column 7, :end-line 299, :end-column 21, :arglists (quote ([shape f] [implementation shape f])), :doc "Creates a array with the specified shape, and each element specified by (f i j k...)\n   Where i, j, k... are the index positions of each element in the matrix", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([shape f] [implementation shape f]), :arglists ([shape f] [implementation shape f]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/compute-matrix, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([shape f] [implementation shape f]), :arglists ([shape f] [implementation shape f]), :arglists-meta (nil nil)}, :method-params ([shape f] [implementation shape f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 299, :end-line 299, :max-fixed-arity 3, :fn-var true, :arglists ([shape f] [implementation shape f]), :doc "Creates a array with the specified shape, and each element specified by (f i j k...)\n   Where i, j, k... are the index positions of each element in the matrix"}, length {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1831, :column 27, :end-line 1831, :end-column 33, :deprecated true, :arglists (quote ([m])), :doc "DEPRECATED: please use magnitude instead."}, :name clojure.core.matrix/length, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 33, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1831, :deprecated true, :end-line 1831, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "DEPRECATED: please use magnitude instead."}, current-implementation {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 2124, :column 7, :end-line 2124, :end-column 29, :arglists (quote ([])), :doc "Gets the currently active matrix implementation as a keyword, e.g. :vectorz"}, :name clojure.core.matrix/current-implementation, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 29, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2124, :end-line 2124, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Gets the currently active matrix implementation as a keyword, e.g. :vectorz"}, sin {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the sin function on all elements of an array, using double precision values. Returns a new array.", :file nil}, :name clojure.core.matrix/sin, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the sin function on all elements of an array, using double precision values. Returns a new array."}, zero-matrix {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 144, :column 7, :end-line 144, :end-column 18, :arglists (quote ([rows columns] [implementation rows columns])), :doc "Constructs a new zero-filled numerical matrix with the given dimensions.\n\n   May produce a lightweight immutable zero matrix if supported by the implementation.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([rows columns] [implementation rows columns]), :arglists ([rows columns] [implementation rows columns]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/zero-matrix, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([rows columns] [implementation rows columns]), :arglists ([rows columns] [implementation rows columns]), :arglists-meta (nil nil)}, :method-params ([rows columns] [implementation rows columns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 3, :fn-var true, :arglists ([rows columns] [implementation rows columns]), :doc "Constructs a new zero-filled numerical matrix with the given dimensions.\n\n   May produce a lightweight immutable zero matrix if supported by the implementation."}, relu {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1909, :column 7, :end-line 1909, :end-column 11, :arglists (quote ([a])), :doc "Computes the ReLU (rectified linear) function for every element of an array."}, :name clojure.core.matrix/relu, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 11, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1909, :end-line 1909, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "Computes the ReLU (rectified linear) function for every element of an array."}, set-column {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1964, :column 7, :end-line 1964, :end-column 17, :arglists (quote ([m i column])), :doc "Sets a column in a matrix using a specified vector."}, :name clojure.core.matrix/set-column, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 17, :method-params ([m i column]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1964, :end-line 1964, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m i column])), :doc "Sets a column in a matrix using a specified vector."}, immutable {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 270, :column 7, :end-line 270, :end-column 16, :arglists (quote ([data])), :doc "Returns an immutable array containing the given array data.\n\n   May return the same array if it is already immutable.\n\n   If the implementation does not support immutable matrices, will return an immutable array\n   from another core.matrix implementation that supports either the same element type or a broader type."}, :name clojure.core.matrix/immutable, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 16, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 270, :end-line 270, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data])), :doc "Returns an immutable array containing the given array data.\n\n   May return the same array if it is already immutable.\n\n   If the implementation does not support immutable matrices, will return an immutable array\n   from another core.matrix implementation that supports either the same element type or a broader type."}, reshape {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1168, :column 7, :end-line 1168, :end-column 14, :arglists (quote ([m shape])), :doc "Changes the shape of a matrix to the specified new shape. shape can be any sequence of dimension sizes.\n\n   Preserves the row-major order of matrix elements. Truncates the sequence of elements if the shape is smaller\n   than the original shape.\n\n   Pads with default values (dependent on implementation - normally zero) if the shape is larger."}, :name clojure.core.matrix/reshape, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 14, :method-params ([m shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1168, :end-line 1168, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m shape])), :doc "Changes the shape of a matrix to the specified new shape. shape can be any sequence of dimension sizes.\n\n   Preserves the row-major order of matrix elements. Truncates the sequence of elements if the shape is smaller\n   than the original shape.\n\n   Pads with default values (dependent on implementation - normally zero) if the shape is larger."}, shape {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 609, :column 7, :end-line 609, :end-column 12, :arglists (quote ([m])), :doc "Returns the shape of an array, i.e. the dimension sizes for all dimensions.\n\n   The result will be a vector containing only integer index values, with a count\n   equal to the dimensionality of the array.\n\n   Returns nil the if object is not an array (i.e. is a scalar value)", :inline (fn ([m] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote cljs.core/if-let)) (clojure.core/list (clojure.core/vec (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote sh)) (clojure.core/list (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote mp/get-shape)) (clojure.core/list m)))))))))) (clojure.core/list (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote cljs.core/vec)) (clojure.core/list (quote sh)))))) (clojure.core/list nil))))))}, :name clojure.core.matrix/shape, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 12, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 609, :end-line 609, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns the shape of an array, i.e. the dimension sizes for all dimensions.\n\n   The result will be a vector containing only integer index values, with a count\n   equal to the dimensionality of the array.\n\n   Returns nil the if object is not an array (i.e. is a scalar value)", :inline (fn ([m] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote cljs.core/if-let)) (clojure.core/list (clojure.core/vec (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote sh)) (clojure.core/list (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote mp/get-shape)) (clojure.core/list m)))))))))) (clojure.core/list (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote cljs.core/vec)) (clojure.core/list (quote sh)))))) (clojure.core/list nil))))))}, transform! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1508, :column 7, :end-line 1508, :end-column 17, :arglists (quote ([t v])), :doc "Transforms a given vector in place. This is a mutable equivalent to `transform`.\n\n   Returns the transformed vector.\n\n   The transformation must map an n-dimensional vector to another n-dimensional vector, i.e.\n   if it is a 2D matrix then it must have shape [n x n]."}, :name clojure.core.matrix/transform!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 17, :method-params ([t v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1508, :end-line 1508, :max-fixed-arity 2, :fn-var true, :arglists (quote ([t v])), :doc "Transforms a given vector in place. This is a mutable equivalent to `transform`.\n\n   Returns the transformed vector.\n\n   The transformation must map an n-dimensional vector to another n-dimensional vector, i.e.\n   if it is a 2D matrix then it must have shape [n x n]."}, scalar? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 478, :column 7, :end-line 478, :end-column 14, :arglists (quote ([v])), :doc "Returns true if the parameter is a scalar value (i.e. acceptable as matrix element value).\n   A 0-d array containing a scalar is *not* itself a scalar value.", :inline (fn [m] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote mp/is-scalar?)) (clojure.core/list m)))))}, :name clojure.core.matrix/scalar?, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 14, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 478, :end-line 478, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns true if the parameter is a scalar value (i.e. acceptable as matrix element value).\n   A 0-d array containing a scalar is *not* itself a scalar value.", :inline (fn [m] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote mp/is-scalar?)) (clojure.core/list m)))))}, zero-dimensional? {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 485, :column 7, :end-line 485, :end-column 24, :arglists (quote ([m])), :doc "Returns true if the parameter has zero dimensions. i.e. it is a 0-d array or a scalar value.\n\n   Behaviour is the same as `scalar?`, except that true is returned for 0-dimensional arrays."}, :name clojure.core.matrix/zero-dimensional?, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 24, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 485, :end-line 485, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns true if the parameter has zero dimensions. i.e. it is a 0-d array or a scalar value.\n\n   Behaviour is the same as `scalar?`, except that true is returned for 0-dimensional arrays."}, dimensionality {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 545, :column 7, :end-line 545, :end-column 21, :arglists (quote ([m])), :doc "Returns the dimensionality of an array. The dimensionality is equal to\n   the number of dimensions in the array's shape.", :inline (fn ([m] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote cljs.core/long)) (clojure.core/list (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote mp/dimensionality)) (clojure.core/list m))))))))))}, :name clojure.core.matrix/dimensionality, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 21, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 545, :end-line 545, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns the dimensionality of an array. The dimensionality is equal to\n   the number of dimensions in the array's shape.", :inline (fn ([m] (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote cljs.core/long)) (clojure.core/list (clojure.core/sequence (clojure.core/seq (clojure.core/concat (clojure.core/list (quote mp/dimensionality)) (clojure.core/list m))))))))))}, rotate {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1076, :column 7, :end-line 1076, :end-column 13, :arglists (quote ([m dimension shift-amount] [m shifts])), :doc "Rotates an array along specified dimensions.\n\n   Elements rotated off will re-appear at the other side. The shape of the array will not be modified.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([m dimension shift-amount] [m shifts]), :arglists ([m dimension shift-amount] [m shifts]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/rotate, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([m dimension shift-amount] [m shifts]), :arglists ([m dimension shift-amount] [m shifts]), :arglists-meta (nil nil)}, :method-params ([m dimension shift-amount] [m shifts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1076, :end-line 1076, :max-fixed-arity 3, :fn-var true, :arglists ([m dimension shift-amount] [m shifts]), :doc "Rotates an array along specified dimensions.\n\n   Elements rotated off will re-appear at the other side. The shape of the array will not be modified."}, signum {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the signum function on all elements of an array, using double precision values. Returns a new array.", :file nil}, :name clojure.core.matrix/signum, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the signum function on all elements of an array, using double precision values. Returns a new array."}, magnitude-squared {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1826, :column 7, :end-line 1826, :end-column 24, :arglists (quote ([m])), :doc "Calculates the squared length (squared magnitude) of a numerical vector"}, :name clojure.core.matrix/magnitude-squared, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 24, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1826, :end-line 1826, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Calculates the squared length (squared magnitude) of a numerical vector"}, log10! {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Computes the log10 function on all elements of an array, using double precision values. Mutates the array in-place.", :file nil}, :name clojure.core.matrix/log10!, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Computes the log10 function on all elements of an array, using double precision values. Mutates the array in-place."}, to-double-array {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 687, :column 7, :end-line 687, :end-column 22, :arglists (quote ([m] [m want-copy?])), :doc "Returns a Java double[] array containing the values of a numerical array m in row-major order. Will\n    throw an error if any of the array elements cannot be converted to doubles.\n\n    If want-copy? is true, will guarantee a new double array (defensive copy).\n    If want-copy? is false, will return the internal array used by m, or nil if not supported\n    by the implementation.\n    If want-copy? is not specified, will return either a copy or the internal array", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([m] [m want-copy?]), :arglists ([m] [m want-copy?]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/to-double-array, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([m] [m want-copy?]), :arglists ([m] [m want-copy?]), :arglists-meta (nil nil)}, :method-params ([m] [m want-copy?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 687, :end-line 687, :max-fixed-arity 2, :fn-var true, :arglists ([m] [m want-copy?]), :doc "Returns a Java double[] array containing the values of a numerical array m in row-major order. Will\n    throw an error if any of the array elements cannot be converted to doubles.\n\n    If want-copy? is true, will guarantee a new double array (defensive copy).\n    If want-copy? is false, will return the internal array used by m, or nil if not supported\n    by the implementation.\n    If want-copy? is not specified, will return either a copy or the internal array"}, element-type {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 539, :column 7, :end-line 539, :end-column 19, :arglists (quote ([m])), :doc "Returns the class of elements that can be in the array. For example, a numerical array may return\n   the class java.lang.Double."}, :name clojure.core.matrix/element-type, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 19, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 539, :end-line 539, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns the class of elements that can be in the array. For example, a numerical array may return\n   the class java.lang.Double."}, non-zero-count {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1979, :column 7, :end-line 1979, :end-column 21, :arglists (quote ([m])), :doc "Counts the number of non-zero values in a numerical array.\n   May perform a full array scan, but will often be quicker for specialised\n   sparse arrays - sometimes as fast as O(1)"}, :name clojure.core.matrix/non-zero-count, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 21, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1979, :end-line 1979, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Counts the number of non-zero values in a numerical array.\n   May perform a full array scan, but will often be quicker for specialised\n   sparse arrays - sometimes as fast as O(1)"}, emap-indexed! {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 2081, :column 7, :end-line 2081, :end-column 20, :arglists (quote ([f m] [f m a] [f m a & more])), :doc "Element-wise map-indexed over all elements of one or more arrays.\n\n   f must accept as first argument the index vector of the current element,\n   and return a result compatible with the element-type of the array m\n\n   Performs in-place modification of the first array argument.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([f m] [f m a]), :arglists ([f m] [f m a] [f m a & more]), :arglists-meta (nil nil nil)}}, :name clojure.core.matrix/emap-indexed!, :variadic true, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([f m] [f m a]), :arglists ([f m] [f m a] [f m a & more]), :arglists-meta (nil nil nil)}, :method-params ([f m] [f m a]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 2081, :end-line 2081, :max-fixed-arity 3, :fn-var true, :arglists ([f m] [f m a] [f m a & more]), :doc "Element-wise map-indexed over all elements of one or more arrays.\n\n   f must accept as first argument the index vector of the current element,\n   and return a result compatible with the element-type of the array m\n\n   Performs in-place modification of the first array argument."}, coerce {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 724, :column 7, :end-line 724, :end-column 13, :arglists (quote ([param] [matrix-or-implementation param])), :doc "Coerces param (which may be any array) into a format preferred by a specific matrix implementation.\n   If the matrix implementation is not specified, uses the current matrix implementation.\n   If param is already in a format deemed usable by the implementation, may return it unchanged.\n\n   coerce should never alter the shape of the array, but may convert element types where necessary\n   (e.g. turning real values into complex values when converting to a complex array type).", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([param] [matrix-or-implementation param]), :arglists ([param] [matrix-or-implementation param]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/coerce, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([param] [matrix-or-implementation param]), :arglists ([param] [matrix-or-implementation param]), :arglists-meta (nil nil)}, :method-params ([param] [matrix-or-implementation param]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 724, :end-line 724, :max-fixed-arity 2, :fn-var true, :arglists ([param] [matrix-or-implementation param]), :doc "Coerces param (which may be any array) into a format preferred by a specific matrix implementation.\n   If the matrix implementation is not specified, uses the current matrix implementation.\n   If param is already in a format deemed usable by the implementation, may return it unchanged.\n\n   coerce should never alter the shape of the array, but may convert element types where necessary\n   (e.g. turning real values into complex values when converting to a complex array type)."}, order {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 1094, :column 7, :end-line 1094, :end-column 12, :arglists (quote ([m indices] [m dimension indices])), :doc "Reorders slices of an array along a specified dimension. Re-orders along major dimension\n   if no dimension is specified.\n\n   Indicies can be any seqable object containing the indices along the specified dimension to select.\n   An index can be selected multiple times (which created repreated slices), or not at all (which excludes\n   the slice from the result).", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([m indices] [m dimension indices]), :arglists ([m indices] [m dimension indices]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/order, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([m indices] [m dimension indices]), :arglists ([m indices] [m dimension indices]), :arglists-meta (nil nil)}, :method-params ([m indices] [m dimension indices]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1094, :end-line 1094, :max-fixed-arity 3, :fn-var true, :arglists ([m indices] [m dimension indices]), :doc "Reorders slices of an array along a specified dimension. Re-orders along major dimension\n   if no dimension is specified.\n\n   Indicies can be any seqable object containing the indices along the specified dimension to select.\n   An index can be selected multiple times (which created repreated slices), or not at all (which excludes\n   the slice from the result)."}, zero-array {:protocol-inline nil, :meta {:file "/home/pedro/GitHub/pong/resources/public/js/clojure/core/matrix.cljc", :line 162, :column 7, :end-line 162, :end-column 17, :arglists (quote ([shape] [implementation shape])), :doc "Creates a new zero-filled numerical array with the given shape.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([shape] [implementation shape]), :arglists ([shape] [implementation shape]), :arglists-meta (nil nil)}}, :name clojure.core.matrix/zero-array, :variadic false, :file "resources/public/js/clojure/core/matrix.cljc", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([shape] [implementation shape]), :arglists ([shape] [implementation shape]), :arglists-meta (nil nil)}, :method-params ([shape] [implementation shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 2, :fn-var true, :arglists ([shape] [implementation shape]), :doc "Creates a new zero-filled numerical array with the given shape."}}, :require-macros {clojure.core.matrix clojure.core.matrix, clojure.core.matrix.macros clojure.core.matrix.macros, default clojure.core.matrix.impl.defaults, clojure.core.matrix.impl.defaults clojure.core.matrix.impl.defaults, clojure.core.matrix.impl.persistent-vector clojure.core.matrix.impl.persistent-vector, mops clojure.core.matrix.impl.mathsops, clojure.core.matrix.impl.mathsops clojure.core.matrix.impl.mathsops, wrap clojure.core.matrix.impl.wrappers, clojure.core.matrix.impl.wrappers clojure.core.matrix.impl.wrappers}, :cljs.analyzer/constants {:seen #{:else :all :first :butlast :last :rest}, :order [:all :last :butlast :first :rest :else]}, :doc "Main namespace for the core.matrix API.\n\n   Functions in this API may be supported by multiple matrix implementations, allowing code that uses\n   this API to quickly switch between implementations without significant changes (if any)."}